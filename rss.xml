<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>place_your_blog_title_here</title>
    <link>place_your_blog_url_here</link>
    <atom:link href="place_your_blog_url_here/rss.xml" rel="self" type="application/rss+xml" />
    <description>place_your_blog_description_here</description>
    <language>place_your_blog_language_here</language>
    <pubDate>Sun, 27 Jul 2014 14:29:24 +0800</pubDate>
    <lastBuildDate>Sun, 27 Jul 2014 14:29:24 +0800</lastBuildDate>

    
    <item>
      <title>高性能网络通讯笔记</title>
      <link>place_your_blog_url_here/%E7%BD%91%E7%BB%9C/2014/07/26/%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E7%AC%94%E8%AE%B0.html</link>
      <pubDate>26 Jul 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/%E7%BD%91%E7%BB%9C/2014/07/26/高性能网络通讯笔记</guid>
      <description>&lt;div&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>非递归的二叉树遍历</title>
      <link>place_your_blog_url_here/%E7%AE%97%E6%B3%95/2014/07/26/%E9%9D%9E%E9%80%92%E5%BD%92%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86.html</link>
      <pubDate>26 Jul 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/%E7%AE%97%E6%B3%95/2014/07/26/非递归的二叉树遍历</guid>
      <description>&lt;div style=&quot;line-height: 1.6; font-family: Helvetica Neue, Arial, Hiragino Sans GB, STHeiti, Microsoft YaHei, WenQuanYi Micro Hei, SimSun, Song, sans-serif;&quot;&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>链路层 网络层 UDP IO模型</title>
      <link>place_your_blog_url_here/%E7%BD%91%E7%BB%9C/2014/07/26/%E9%93%BE%E8%B7%AF%E5%B1%82%20%E7%BD%91%E7%BB%9C%E5%B1%82%20UDP%20IO%E6%A8%A1%E5%9E%8B.html</link>
      <pubDate>26 Jul 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/%E7%BD%91%E7%BB%9C/2014/07/26/链路层 网络层 UDP IO模型</guid>
      <description>&lt;div style=&quot;line-height: 1.6; font-family: Helvetica Neue, Arial, Hiragino Sans GB, STHeiti, Microsoft YaHei, WenQuanYi Micro Hei, SimSun, Song, sans-serif;&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;OSI 7层：物数网传|会表应；&lt;br/&gt;TCP/IP 5层：物理层 / 链路层 / 网络层 / 传输层 / 应用层&lt;/p&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;1. 链路层&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;传输单位是&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;frame&lt;/code&gt;,负责同一局域网内主机/直接连接主机之间的数据传输。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;常见的链路层协议：&lt;/p&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;以太网（有线和无线局域网）&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;em&gt;只讨论星形拓扑结构&lt;/em&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;共享型以太网&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;是一种广播网络，通过 &lt;strong style=&quot;font-weight: bold;&quot;&gt;集线器hub&lt;/strong&gt; 组建。Hub工作在物理层，单纯地复制并向所有主机转发物理信号，因此主机能够看到局域网内传送的所有信息。主机通过比对帧内的目的MAC地址和自己的MAC地址，判断是否接收。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;WIFI也是共享型。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;交换型以太网&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;通过交换机组建，交换机工作在链路层，会解析帧的目的MAC地址并选择性地转发。&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 15px 0; font-size: 14px; border-left: 5px solid #ddd; background-color: rgba(102, 128, 153, 0.05);&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;以太网中的单播/广播/组播： 根据帧目的MAC地址区分&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;广播&lt;/strong&gt;：（目的MAC地址全1）&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;组播&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;网络层中，组播地址允许源设备向一组设备发送数据包，组播IP地址只能是D类。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;组播帧中的目的 MAC 地址是一个特殊的十六进制数值，以 01-00-5E 开头。然后将 IP 组播组地址的低 23 位换算成以太网地址中剩余的 6 个十六进制字符，作为组播 MAC 地址的结尾。MAC 地址剩余的位始终为 &quot;0&quot;。&lt;/p&gt;
&lt;/blockquote&gt;&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;ppp&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;~&lt;/p&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;MTU&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;帧的最大长度，不同类型的链路层有自己的MTU；当IP数据报长度超过链路层MTU时，需要分片。&lt;/p&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;2. 网络层&lt;/h2&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;2.1 IP&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;IP协议传输的特点：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;best-effort，不保证到达&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;无序，不保证到达的顺序&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;主要负责两件事：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;地址管理&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;分组转发&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 25px; margin-bottom: 15px; font-size: 18px;&quot;&gt;地址管理&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;IP地址分为3个部分：网络号/子网号/主机号&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;网络号的长度：地址分类决定&lt;/strong&gt; &lt;/p&gt;
&lt;table style=&quot;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px;&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;padding: 8px; line-height: 20px; text-align: left; vertical-align: top; border: 1px solid #DDD;&quot;&gt;头--网络号--(子网&amp;amp;主机号)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;A类&lt;/td&gt;
&lt;td style=&quot;padding: 8px; line-height: 20px; text-align: left; vertical-align: top; border: 1px solid #DDD;&quot;&gt;0--7位--24位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;B类&lt;/td&gt;
&lt;td style=&quot;padding: 8px; line-height: 20px; text-align: left; vertical-align: top; border: 1px solid #DDD;&quot;&gt;10--14位--16位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;C类&lt;/td&gt;
&lt;td style=&quot;padding: 8px; line-height: 20px; text-align: left; vertical-align: top; border: 1px solid #DDD;&quot;&gt;110--21位--8位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;D类&lt;/td&gt;
&lt;td style=&quot;padding: 8px; line-height: 20px; text-align: left; vertical-align: top; border: 1px solid #DDD;&quot;&gt;1110--28位多播组号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;子网号的长度：子网掩码决定&lt;/strong&gt;&lt;br/&gt;子网掩码的0决定了主机号的长度。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;保留IP地址，用于局域网&lt;/strong&gt;&lt;br/&gt;10.x.x.x、172.16.x.x-172.31.x.x、192.168.x.x&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;以太网根据帧的目的MAC地址决定该帧需要单播/广播/多播，相应的，IP地址也有这样的分类：&lt;br/&gt;广播：主机号全1（指向网络的，子网号也全1/指向子网的）。&lt;br/&gt;多播：D类地址&lt;br/&gt;传输层协议中，只有UDP支持广播和多播。&lt;/p&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 25px; margin-bottom: 15px; font-size: 18px;&quot;&gt;选路&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;IP数据报的传递是逐跳的。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;路由器将各局域网连接起来，工作在网络层，负责IP数据报的转发。Switches create a network. Routers connect networks.&lt;/p&gt;
&lt;h5 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 25px; margin-bottom: 15px; font-size: 14px;&quot;&gt;转发规则&lt;/h5&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;路由过程中，主机按照路由表匹配数据报的IP地址，决定下一跳要发往相邻节点。路由表项：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;目标IP：一个完整的IP地址（主机号不为0），或一个网络地址（只有网络号和子网号，主机号全0，需要子网掩码判断主机号/子网号的长度）&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;下一跳路由器IP（gateway）：符合该项的数据报发送到哪个路由器&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;标志&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;网卡：经过哪个网卡发送&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;2.2 ARP&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;数据报从网络层进入链路层被发送，在发送一个以太网帧前，必须将目的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;IP地址&lt;/code&gt;（不是IP数据报中的目的IP，而是选路决定的下一跳IP）转换成&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;以太网地址（MAC地址）&lt;/code&gt;。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;ARP为IP到MAC地址提供动态映射，这个过程是自动的；每个主机有一个ARP缓存，ARP协议自动维护该结构。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;ARP工作在网络层，有自己的数据报格式。它利用以太网的广播功能，发送一个广播帧给局域网内的所有主机，当某一主机收到对自己的ARP请求后（依据目标IP判断），就把自己的MAC地址填入并单播发送回去。&lt;/p&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;2.3 IP的配套协议：ICMP&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;工作在传输层&lt;/strong&gt;，和TCP/UDP一样，由IP数据包包裹发送，但 &lt;strong style=&quot;font-weight: bold;&quot;&gt;逻辑上划分在网络层&lt;/strong&gt;，作为IP协议的辅助协议，用于:&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;发送IP数据报传输过程中出现的错误；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;查询/控制/诊断信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;格式：&lt;br/&gt;类型 | 代码 | 检验和 | 内容&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;类型和代码决定ICMP报文具体类型；&lt;/p&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 25px; margin-bottom: 15px; font-size: 18px;&quot;&gt;ICMP的典型应用:&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt; 1. 主机不可达错误 &lt;/strong&gt;&lt;br/&gt;当主机/路由器接受一个IP数据报，但又无法转发时，向源主机发送“主机不可达”ICMP报文。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt; 2. 端口不可达错误 &lt;/strong&gt;&lt;br/&gt;UDP发送到主机一个没有使用的端口，目的主机将返回一个ICMP“端口不可达”错误报文。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt; 3. Ping &lt;/strong&gt;&lt;br/&gt;目的：诊断网络通畅；&lt;br/&gt;工作方式：循环向目标主机发送ICMP echo请求，目标主机返回ICMP echo响应。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt; 4. TraceRoute &lt;/strong&gt;&lt;br/&gt;目的： 查看到目的主机的网络路径&lt;br/&gt;原理： ICMP超时报文 + IP数据报中TTL字段。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;TTL由发送端设置，指定数据报的存活跳数，每转发一次减1，当TTL降到0时数据报被丢弃，主机向源发送ICMP“超时”报文。&lt;br/&gt;TraceRoute通过UDP发送数据给目的主机，但选择一个不可能的端口，目的主机将返回“端口不可达”ICMP报文。程序每次发送数据时，其TTL递增，初始值为1，依据“超时”ICMP报文构建路径，收到“端口不可到达”报文时结束。&lt;/p&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;2.4 IP数据报的分片&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;当IP数据报超过链路层的MTU时需要分片，每一片成为一个独立的数据报被传输，最终目的地负责组装。如果其中一片丢失，整个原始数据报被当做发送失败，这增加了IP数据报发送失败的机会。对于TCP这样的具有超时重传机制的高层协议，IP分片大大提高了需要重传数据的数量，因此TCP通过在连接阶段交换两端MSS/路径MTU发现等方式尽力避免IP分片。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;IP数据报也可以被设置成不允许分片，当路由器发现其大小超过MTU但又无法分片时，将向源主机发送ICMP“不能分片”错误报文。&lt;strong style=&quot;font-weight: bold;&quot;&gt;TCP的路径MTU发现也是依赖该机制的。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;3. 传输层&lt;/h2&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;3.1 UDP&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;UDP是IP协议在传输层暴露的一个简单接口，增加了对“端口”概念的支持。&lt;/p&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;3.2 Socket缓冲区&lt;/h3&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 25px; margin-bottom: 15px; font-size: 18px;&quot;&gt;1. 发送缓冲区&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;TCP&lt;/strong&gt;&lt;br/&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1401176186205.png&quot; name=&quot;dbc4ea6e-680b-4ef5-b159-d574dcee8eed&quot; src=&quot;/assets/img/e215948a4febbdaee99740765ad9b60c.png&quot; style=&quot;border: 0; max-width: 100%;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;TCP服务器通常是并发的。每个TCP socket都有发送缓冲区，write只是将数据从应用进程缓冲区拷贝到了socket缓冲区，当发送缓冲区容量不够时，write调用被阻塞（假设是阻塞IO方式）。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;TCP模块取发送缓冲区的数据并发送，报文段的长度为MSS或更小；直到收到ACK，数据才可从缓冲区中删除。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;UDP&lt;/strong&gt;&lt;br/&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1401176413600.png&quot; name=&quot;79194caa-1fd5-428a-84c8-423249e46789&quot; src=&quot;/assets/img/e7e3ae032b1dd39e408cf28ec517e9f8.png&quot; style=&quot;border: 0; max-width: 100%;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;UDP没有发送缓冲区，socket上每次write，内核都直接将数据封装成一个UDP报文段/IP数据报，并将其或者其分片加入链路层的输出队列。UDP的发送缓冲区大小(SO_SNDBUF)其实是设置每次写到socket数据的最大值，当写数据大于该值时，返回EMSGSIZE错误。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;理论上，UDP数据报的最大长度由IP数据报的最大长度决定，IP首部16bit总长度字段限制IP数据报最大长度为65535字节，但实际实现往往要小于这个值。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;UDP没有MSS机制，因此更容易发生IP分片，数据更容易丢失。&lt;/p&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 25px; margin-bottom: 15px; font-size: 18px;&quot;&gt;2. 接收缓冲区&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;TCP&lt;/strong&gt;&lt;br/&gt;接收缓冲区的剩余空间就是滑动窗口协议中的接收窗口大小。&lt;br/&gt;TCP提供流式的数据读取，当报文段到达时，应用层数据被提取并送入接收缓冲区，应用进程读取时不了解报文段之间的边界。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;UDP&lt;/strong&gt;&lt;br/&gt;UDP没有连接的概念，因此UDP服务器通常只用一个线程循环处理所有收到的数据报，&lt;strong style=&quot;font-weight: bold;&quot;&gt;所有客户端在服务器端重用一个接收缓冲区&lt;/strong&gt;，发来的数据报都会先其中排队，依次交付给应用进程。UDP是非流式的，应用进程以数据报为单位读取（将数据报从内核缓冲区复制到应用缓冲区），如果应用进程缓冲区小于该次读取的数据报长度，数据报将被截断，剩下的部分被丢弃，API提示一个错误。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;a href=&quot;http://www2.chrishardick.com:1099/Notes/Computing/C/sockets/socket_options.html&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;参考&lt;/a&gt;：&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap;&quot; xml:space=&quot;preserve&quot;&gt;&lt;div style=&quot;padding: 6px 15px 4px; background: #D2DADF; color: #666; border-bottom: 1px solid #CECBF0; text-shadow: 1px 1px 0px #FFF;&quot;&gt;SO_RCVBUF/SO_SNDBUF Socket Options&lt;/div&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;* Option Type: Int
* Every socket has a socket send buffer and a socket receive buffer
* Allows you to &lt;span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;change&lt;/span&gt; the &lt;span style=&quot;color: #F92672;&quot;&gt;default&lt;/span&gt; sizes
* TCP buffer sizes &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; connected sockets &lt;span style=&quot;color: #F92672;&quot;&gt;are&lt;/span&gt; always inherited &lt;span style=&quot;color: #F92672;&quot;&gt;from&lt;/span&gt; the listening socket

Socket Receive Buffer
* &lt;span style=&quot;color: #F92672;&quot;&gt;For&lt;/span&gt; TCP, the available &lt;span style=&quot;color: #F92672;&quot;&gt;size&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; the receive buffer &lt;span style=&quot;color: #F92672;&quot;&gt;is&lt;/span&gt; the advertised window which &lt;span style=&quot;color: #F92672;&quot;&gt;is&lt;/span&gt; advertised &lt;span style=&quot;color: #F92672;&quot;&gt;to&lt;/span&gt; the TCP peer. This &lt;span style=&quot;color: #F92672;&quot;&gt;is&lt;/span&gt; TCP&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;s flow control.
* With both TCP and UDP, if a segment arrives which will not fit in the socket receive buffer, it will be discarded
* For TCP clients, this option must be set prior to calling connect( )
* For TCP servers, this option must be set for the listening socket, prior to calling listen( )

Socket Send Buffer
* UDP does not physically have a socket send buffer--it&#39;&lt;/span&gt;s &lt;span style=&quot;color: #F92672;&quot;&gt;not&lt;/span&gt; a reliable protocol &lt;span style=&quot;color: #F92672;&quot;&gt;and&lt;/span&gt; need &lt;span style=&quot;color: #F92672;&quot;&gt;not&lt;/span&gt; keep a copy &lt;span style=&quot;color: #F92672;&quot;&gt;of&lt;/span&gt; the &lt;span style=&quot;color: #F92672;&quot;&gt;data&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; re-transmission. &lt;span style=&quot;color: #F92672;&quot;&gt;For&lt;/span&gt; UDP, SO_SNDBUF &lt;span style=&quot;color: #F92672;&quot;&gt;is&lt;/span&gt; simply an &lt;span style=&quot;color: #F92672;&quot;&gt;upper&lt;/span&gt; bound &lt;span style=&quot;color: #F92672;&quot;&gt;on&lt;/span&gt; the maximum sized UDP datagram which can be written &lt;span style=&quot;color: #F92672;&quot;&gt;to&lt;/span&gt; the socket (&lt;span style=&quot;color: #F92672;&quot;&gt;not&lt;/span&gt; the &lt;span style=&quot;color: #F92672;&quot;&gt;size&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;of&lt;/span&gt; a physical buffer)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 15px 0; font-size: 14px; border-left: 5px solid #ddd; background-color: rgba(102, 128, 153, 0.05);&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;什么时候用UDP代替TCP？&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 0; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;如果只是简短的单次交互（如查询--应答），这时TCP的3次握手和4次挥手的开销就显得太大，UDP效率更高，但需要应用层自己负责超时和重传，保证可靠性；DNS就是这样的例子。&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;注重传输效率/时效性，不需要可靠性和有序性的场景，典型的如流媒体/语音通话&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;并发连接太多，TCP需要为每个连接维护相应的数据结构（如缓冲区），但每个连接上发送的数据频率较低且量小，此时UDP能显著降低开销，但可能需要在应用层提供TCP的一些特性，如超时重传/顺序性/流量&amp;amp;拥塞控制等等。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;4. Unix下的IO模型&lt;/h2&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;阻塞IO&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;非阻塞IO&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;IO复用（select/poll/epoll）&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;信号驱动IO&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;异步IO（Posix中的aio...系列函数）&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;以读为例，IO的两个阶段：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;等待内核数据就绪，在TCP中就是等待TCP接收缓冲区中有数据；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;从内核拷贝数据到用户空间&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;以上IO模型：&lt;/p&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;阻塞IO两个阶段都阻塞，直到整个请求完成；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;非阻塞IO是best-effort式的，只做请求的一部分并立即返回；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;IO复用是针对第一个阶段而言的，阻塞在第一阶段，但可以用一个selector监控多个fd；第二阶段可以搭配阻塞IO或非阻塞IO；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;信号驱动IO？&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;异步IO两个阶段都由内核完成，用户进程只需要提供一个callback，在IO完成后接收OS的通知。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 15px 0; font-size: 14px; border-left: 5px solid #ddd; background-color: rgba(102, 128, 153, 0.05);&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;异步/同步，阻塞/非阻塞&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;假设某线程（姑且称为client线程）要完成某任务：&lt;/p&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;同步：client线程亲自处理，并在处理完毕后才去做别的事情；&lt;/p&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;异步：client线程提交任务给他人（内核/框架/etc）并立刻运行其他逻辑，后者在完成后通过某种方式（如callback）通知client线程。client线程也可以通过某些方式（如Future）在任一时刻查询任务完成的情况。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;同步和异步的区别在于谁是任务的执行者：client线程 or 其他。&lt;/strong&gt;&lt;/p&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;阻塞：如果任务不能一次性完成，则client线程进入等待状态，任务之后的逻辑无法执行直到条件满足；&lt;/p&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;非阻塞：如果任务不能一次性完成，则完成部分并立刻返回，不会等待。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;阻塞和非阻塞的区别在于client线程是否会进入等待状态&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;异步和非阻塞这两个概念尤其容易混淆，因为&lt;strong style=&quot;font-weight: bold;&quot;&gt;异步 &quot;包含了&quot; 非阻塞的语义&lt;/strong&gt;（因为任务不是client线程完成的，不用傻等任务完成），但非阻塞并不一定意味着异步。这一点很好理解，比如非阻塞io依然需要client线程不停地来回在内核缓冲区和用户空间进行内存拷贝 --- client线程参与执行了任务，它是同步的。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;根据上面的理论，如果在IO的语境且IO指的是“等待条件就绪 + 数据拷贝完成 ”，很明显，《Unix网络编程》中对5种IO方式的划分是很合理的：除了异步IO，其他的都是同步IO。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;“任务/client线程/任务执行者”的含义通常随语境变化。如Netty的write是client线程提交给框架并最终由后者完成的（严格来说是无法第一次全部写入的那部分数据），因此它可以宣称自己的API接口是“异步的”。但如果再细粒度地从底层IO考察，它是基于IO多路复用+non-blocking io的，显然属于同步IO。&lt;/p&gt;
&lt;/blockquote&gt;&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;4.1 多路复用&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;通常 &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;IO multiplexing&lt;/code&gt; 和 &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;非阻塞&lt;/code&gt; 二者是联合起来使用的。传统阻塞IO在服务器端的并发模型是一连接一线程，即使某个连接上没有数据流动，也要占用一个线程的资源；多路复用+非阻塞，连接上没有数据流动则不占线程资源，因此可以用少量线程处理大量连接，但只适合 &lt;strong style=&quot;font-weight: bold;&quot;&gt;“总连接很多，但同一时刻活跃连接较少” &lt;/strong&gt; 的情况，如果连接的读写都很频繁，该模型没有优势。&lt;/p&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 25px; margin-bottom: 15px; font-size: 18px;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;select&lt;/code&gt;&lt;/h4&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap;&quot; xml:space=&quot;preserve&quot;&gt;&lt;div style=&quot;padding: 6px 15px 4px; background: #D2DADF; color: #666; border-bottom: 1px solid #CECBF0; text-shadow: 1px 1px 0px #FFF;&quot;&gt;IO multiplexing: select&lt;/div&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;select&lt;/span&gt;(&lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; nfds, fd_set &lt;span style=&quot;color: #f8f8f2;&quot;&gt;*readfds&lt;/span&gt;, fd_set &lt;span style=&quot;color: #f8f8f2;&quot;&gt;*writefds&lt;/span&gt;, fd_set &lt;span style=&quot;color: #f8f8f2;&quot;&gt;*exceptfds&lt;/span&gt;, struct timeval &lt;span style=&quot;color: #f8f8f2;&quot;&gt;*timeout&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;fd_set内部实际上是个bitmap，每个文件描述符对应一个bit。读写事件分别对应一个bitmap，需要监测某个socket则将其对应的bit置1。当select返回时，bitmap中有事件的为1，没有事件的被清零，循环bitmap可知哪些文件描述符上有事件发生。&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 15px 0; font-size: 14px; border-left: 5px solid #ddd; background-color: rgba(102, 128, 153, 0.05);&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;每个进程的文件描述符（包括socket）从2开始依次递增&lt;/p&gt;
&lt;/blockquote&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;select的缺点：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;bitmap的长度决定了单个进程能够监控的socket的最大数量，但它是个固定值，由系统决定，一般是1024或2048，大部分情况下不够，如果要支持更高的连接数则只能用多进程；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;select需要将fd bitmap在用户空间/内核空间来回拷贝，这个开销是O(N)的；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;每次select内核需要对所有监控的fd扫描一遍，O(N)，连接数一多性能就下降；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;select返回后，用户必须自己遍历bitmap才能知道哪些fd上有IO事件发生。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 25px; margin-bottom: 15px; font-size: 18px;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;Poll&lt;/code&gt;&lt;/h4&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap;&quot; xml:space=&quot;preserve&quot;&gt;&lt;div style=&quot;padding: 6px 15px 4px; background: #D2DADF; color: #666; border-bottom: 1px solid #CECBF0; text-shadow: 1px 1px 0px #FFF;&quot;&gt;IO multiplexing：poll&lt;/div&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;poll(&lt;span style=&quot;color: #F92672;&quot;&gt;struct&lt;/span&gt; pollfd *fds, &lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; nfds, &lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; timeout)

&lt;span style=&quot;color: #F92672;&quot;&gt;struct&lt;/span&gt; pollfd {
    &lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; fd;
    &lt;span style=&quot;color: #F92672;&quot;&gt;short&lt;/span&gt; events;
    &lt;span style=&quot;color: #F92672;&quot;&gt;short&lt;/span&gt; revents;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;poll和select本质是一样的，只不过它不是基于bitmap而是基于结构体数组的，没有最大连接数的限制。&lt;/p&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 25px; margin-bottom: 15px; font-size: 18px;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;epoll&lt;/code&gt;&lt;/h4&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap;&quot; xml:space=&quot;preserve&quot;&gt;&lt;div style=&quot;padding: 6px 15px 4px; background: #D2DADF; color: #666; border-bottom: 1px solid #CECBF0; text-shadow: 1px 1px 0px #FFF;&quot;&gt;IO multiplexing：epoll&lt;/div&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; epoll_create(&lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; size)； &lt;span style=&quot;color: #75715e;&quot;&gt;// 创建epoll fd&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; epoll_ctl(&lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; epfd, &lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; op, &lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; fd, &lt;span style=&quot;color: #F92672;&quot;&gt;struct&lt;/span&gt; epoll_event *event)；&lt;span style=&quot;color: #75715e;&quot;&gt;// 注册监听&lt;/span&gt;

            &lt;span style=&quot;color: #F92672;&quot;&gt;typedef&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;union&lt;/span&gt; epoll_data {
                &lt;span style=&quot;color: #F92672;&quot;&gt;void&lt;/span&gt; *ptr;
                &lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; fd;
                __uint32_t u32;
                __uint64_t u64;
            } epoll_data_t;

            &lt;span style=&quot;color: #F92672;&quot;&gt;struct&lt;/span&gt; epoll_event {
                __uint32_t events;      &lt;span style=&quot;color: #75715e;&quot;&gt;/* Epoll events */&lt;/span&gt;
                epoll_data_t data;      &lt;span style=&quot;color: #75715e;&quot;&gt;/* User data variable */&lt;/span&gt;
            };

&lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; epoll_wait(&lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; epfd, &lt;span style=&quot;color: #F92672;&quot;&gt;struct&lt;/span&gt; epoll_event * events, &lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; maxevents, &lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; timeout); &lt;span style=&quot;color: #75715e;&quot;&gt;// 返回后events数组中就是IO事件&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;优点：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;监视的描述符数量不受限制，它所支持的FD上限是最大可以打开文件的数目。&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;epoll不同于select和poll轮询，而是通过为每个fd定义callback实现，内核只会为就绪的fd执行callback，相当于将原来的线性扫描的工作分散给各个fd自己了，因此时间复杂度为O(IO就绪的fd数量)，而不是O(N)，当连接数很多但活跃连接少时，性能大大提升；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;支持&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;Level Trigger&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;Edge Trigger&lt;/code&gt;（只告诉进程哪些文件描述符刚刚变为就绪状态，它只说一遍，如果我们没有采取行动，那么它将不会再次告知，这种方式称为Edge Trigger；select和poll只支持LevelTrigger，会反复通知）两种方式；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;内核需要将就绪fd通知给用户进程，select和poll简单地进行拷贝，epoll则使用mmap避免多余的内存拷贝；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;只将IO就绪的fd通知给用户，不再需要自己遍历所有fd检查IO事件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;参考：&lt;/p&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://www.ulduzsoft.com/2014/01/select-poll-epoll-practical-difference-for-system-architects/&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;select / poll / epoll: practical difference for system architects&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/sharra/archive/2010/12/30/1921287.html&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;POLL, SELECT &amp;amp; EPOLL 原理比较分析&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://blog.csdn.net/mafuli007/article/details/7233304&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;Select和epoll的区别&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/bigwangdi/p/3182958.html&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;Linux中select poll和epoll的区别&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://blog.163.com/sky20081816@126/blog/static/164761023201073033517435/&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;在Linux上开发网络服务器的一些相关细节 poll与epoll&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/novoland/p/3765783.html&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;select/poll/epoll介绍 -- 《构建高性能Web站点》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>贝叶斯</title>
      <link>place_your_blog_url_here/%E7%AE%97%E6%B3%95/2014/07/26/%E8%B4%9D%E5%8F%B6%E6%96%AF.html</link>
      <pubDate>26 Jul 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/%E7%AE%97%E6%B3%95/2014/07/26/贝叶斯</guid>
      <description>&lt;div style=&quot;line-height: 1.6; font-family: Helvetica Neue, Arial, Hiragino Sans GB, STHeiti, Microsoft YaHei, WenQuanYi Micro Hei, SimSun, Song, sans-serif;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;1. 贝叶斯定理&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;贝叶斯定理是一个关于 &lt;strong style=&quot;font-weight: bold;&quot;&gt;条件概率&lt;/strong&gt; 的公式。所谓&quot;条件概率&quot;（Conditional probability），就是指在事件B发生的情况下，事件A发生的概率，用 &lt;span style=&quot;display:inline-block;margin:0&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 4.44em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 3.358em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 来表示。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;先来看一个问题：&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 15px 0; font-size: 14px; border-left: 5px solid #ddd; background-color: rgba(102, 128, 153, 0.05);&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;两个一模一样的碗，一号碗有30颗水果糖和10颗巧克力糖，二号碗有水果糖和巧克力糖各20颗。随机选择一个碗并从中摸一颗糖，求抽到1号碗且摸到的是水果糖的概率。&lt;/p&gt;
&lt;/blockquote&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;如果把 &lt;strong style=&quot;font-weight: bold;&quot;&gt;“抽到1号碗” 称为事件 A，“摸到水果糖” 称为事件 B&lt;/strong&gt;，问题即求 A/B 两个事件同时发生的概率 &lt;span style=&quot;display:inline-block;margin:0&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 4.115em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 3.087em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，很明显结果等于 &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 8px; margin: 0 4px;&quot;&gt;抽到1号碗的概率 * 在1号碗中摸到水果糖的概率&lt;/code&gt;：&lt;/p&gt;
&lt;div style=&quot;margin: 20px 0; text-align: center;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;div style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 23.866em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 18.076em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic; padding-left: 0.273em;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;×&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic; padding-left: 0.219em;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;0.5&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;×&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;30&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;40&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;现在换一种问法：&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 15px 0; font-size: 14px; border-left: 5px solid #ddd; background-color: rgba(102, 128, 153, 0.05);&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;随机选择一个碗，从中摸出一颗糖，发现是水果糖。请问这颗水果糖来自一号碗的概率有多大？&lt;/p&gt;
&lt;/blockquote&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;问题变成了求 事件B（从两个碗中摸到水果糖）发生的前提下，事件A（抽到1号碗）的概率，即条件概率 &lt;span style=&quot;display:inline-block;margin:0&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 4.44em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 3.358em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;。在之前公式的基础上进行推导：&lt;/p&gt;
&lt;div style=&quot;margin: 20px 0; text-align: center;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;div style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 14.721em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 11.15em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic; padding-left: 0.273em;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;×&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic; padding-left: 0.219em;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;margin: 20px 0; text-align: center;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;div style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 14.721em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 11.15em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic; padding-left: 0.273em;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;×&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic; padding-left: 0.219em;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;margin: 20px 0; text-align: center;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;div style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 9.797em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 7.416em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic; padding-left: 0.273em;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;margin: 20px 0; text-align: center;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;div style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 30.143em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 22.838em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.031em 1000.003em 3.791em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;=&lt;span style=&quot;font-family:MathJax_Main, serif; font-style: normal; font-weight: normal;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;padding-left: 0.273em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;贝&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;叶&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;斯&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;公&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;式&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;padding-left: 0.273em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;padding-left: 0.111em; padding-right: 0.111em;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 3.195em; height: 0px;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -3.352em; left: 50%; margin-left: -1.512em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -1.945em; left: 50%; margin-left: -1.134em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; clip: rect(0.869em 1000.003em 1.247em -0.484em); top: -1.296em; left: 0.003em;&quot;&gt;&lt;span style=&quot;border-left-width: 3.195em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0.003em;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 1.085em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic; padding-left: 0.273em;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;×&lt;/span&gt;&lt;span style=&quot;padding-left: 0.219em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;padding-left: 0.111em; padding-right: 0.111em;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 3.466em; height: 0px;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -3.352em; left: 50%; margin-left: -1.675em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -1.945em; left: 50%; margin-left: -1.134em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; clip: rect(0.869em 1000.003em 1.247em -0.484em); top: -1.296em; left: 0.003em;&quot;&gt;&lt;span style=&quot;border-left-width: 3.466em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0.003em;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 1.085em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 3.361em; vertical-align: -1.354em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;display:inline-block;margin:0&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 3.087em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 2.33em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; : 抽到1号碗的概率&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;display:inline-block;margin:0&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 3.087em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 2.33em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; : 从两个碗中摸到一个水果糖的概率&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;display:inline-block;margin:0&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 4.44em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 3.358em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; : 从1号碗中摸到水果糖的概率，为 0.75&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;假设两个碗是一样的，不考虑摸糖的动作，抽到1号碗的概率 &lt;span style=&quot;display:inline-block;margin:0&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 3.087em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 2.33em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 为 0.5，我们把这个概率称为 &lt;strong style=&quot;font-weight: bold;&quot;&gt;先验概率&lt;/strong&gt;，即根据经验或其他统计信息得到的一个已知概率。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;span style=&quot;display:inline-block;margin:0&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 4.44em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 3.358em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 被称为 &lt;strong style=&quot;font-weight: bold;&quot;&gt;后验概率&lt;/strong&gt;，指的是当我们做了一次实验，或观测到新的更具体的数据（事件B，这里是摸到水果糖）后，对 &lt;strong style=&quot;font-weight: bold;&quot;&gt;先验概率&lt;/strong&gt; &lt;span style=&quot;display:inline-block;margin:0&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 3.087em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 2.33em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 进行修正。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;剩下的问题就是如何求 &lt;span style=&quot;display:inline-block;margin:0&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 3.087em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 2.33em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 了，它等于抽到第一个碗且从中摸到一颗水果糖的概率，加上抽到第二个碗且从中摸到一颗水果糖的概率。如果称抽到第一个碗为事件A1，第二个碗为A2，则：&lt;/p&gt;
&lt;div style=&quot;margin: 20px 0; text-align: center;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;div style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 23.379em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 17.698em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic; padding-left: 0.273em;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 1.193em; height: 0px;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.626em 1000.003em 2.654em -0.43em); top: -2.486em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.492em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; top: -2.108em; left: 0.76em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-size: 70.7%; font-family:MathJax_Main, serif;&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.275em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 1.193em; height: 0px;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.626em 1000.003em 2.654em -0.43em); top: -2.486em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.492em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; top: -2.108em; left: 0.76em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-size: 70.7%; font-family:MathJax_Main, serif;&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.275em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic; padding-left: 0.219em;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 1.193em; height: 0px;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.626em 1000.003em 2.654em -0.43em); top: -2.486em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.492em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; top: -2.108em; left: 0.76em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-size: 70.7%; font-family:MathJax_Main, serif;&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.275em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 1.193em; height: 0px;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.626em 1000.003em 2.654em -0.43em); top: -2.486em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.492em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; top: -2.108em; left: 0.76em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-size: 70.7%; font-family:MathJax_Main, serif;&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.275em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;margin: 20px 0; text-align: center;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;div style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 21.377em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 16.182em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;0.5&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;×&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;0.75&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;0.5&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;×&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;0.5&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;0.625&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;上式亦即所谓的 &lt;strong style=&quot;font-weight: bold;&quot;&gt;全概率公式&lt;/strong&gt;。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;最后由贝叶斯公式，有：&lt;/p&gt;
&lt;div style=&quot;margin: 20px 0; text-align: center;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;div style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 27.221em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 20.62em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.031em 1000.003em 3.791em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic; padding-left: 0.273em;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;×&lt;/span&gt;&lt;span style=&quot;padding-left: 0.219em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;padding-left: 0.111em; padding-right: 0.111em;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 3.466em; height: 0px;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -3.352em; left: 50%; margin-left: -1.675em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -1.945em; left: 50%; margin-left: -1.134em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; clip: rect(0.869em 1000.003em 1.247em -0.484em); top: -1.296em; left: 0.003em;&quot;&gt;&lt;span style=&quot;border-left-width: 3.466em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0.003em;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 1.085em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;0.5&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;×&lt;/span&gt;&lt;span style=&quot;padding-left: 0.219em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;padding-left: 0.111em; padding-right: 0.111em;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 2.33em; height: 0px;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.843em 1000.003em 2.817em -0.43em); top: -3.352em; left: 50%; margin-left: -0.863em;&quot;&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;0.25&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; clip: rect(1.843em 1000.003em 2.817em -0.43em); top: -1.945em; left: 50%; margin-left: -1.08em;&quot;&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;0.625&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; clip: rect(0.869em 1000.003em 1.247em -0.484em); top: -1.296em; left: 0.003em;&quot;&gt;&lt;span style=&quot;border-left-width: 2.33em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0.003em;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 1.085em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;0.6&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 3.361em; vertical-align: -1.354em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;这表明，来自一号碗的概率是0.6。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;我们可以看到一个有趣的现象，如果仅选择碗，选中1号的概率是0.5；一旦摸到一颗水果糖，这个概率立刻被增加到0.6，即 &lt;strong style=&quot;font-weight: bold;&quot;&gt;摸出水果糖这个事件加强了先验概率&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;2. 贝叶斯定理的应用&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;贝叶斯定理经常被用来计算 &lt;strong style=&quot;font-weight: bold;&quot;&gt;一个推测成立的概率&lt;/strong&gt;。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;在实际应用中，事件 B 通常是一个已经发生的，可被观测到的数据，而 A 是我们根据事件B提供的数据提出来的一个猜测（假设），后验概率 &lt;span style=&quot;display:inline-block;margin:0&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 4.44em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 3.358em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 可以告诉我们这个猜测有多靠谱。如果有很多可能的猜测，对所有猜测都计算一遍后验概率，就能找到最靠谱的那个。&lt;/p&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;2.1 拼写纠正问题&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;拼写纠正器需要解决这样一个问题：&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 15px 0; font-size: 14px; border-left: 5px solid #ddd; background-color: rgba(102, 128, 153, 0.05);&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;当用户输入一个不存在的单词时，他真正是想输入什么单词呢？&lt;/p&gt;
&lt;/blockquote&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;我们可以先从词典中找出所有编辑距离为2的单词作为候选单词，但其中哪个单词概率最大呢？在这个问题中，事件 B 是用户已经输入的单词，我们需要找到这样一个单词，使得以下概率最大：&lt;/p&gt;
&lt;div style=&quot;margin: 20px 0; text-align: center;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;div style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 15.1em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 11.42em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.68em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;猜&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;测&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;单&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;词&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;实&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;际&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;输&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;入&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;单&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:STIXGeneral, &#39;Arial Unicode MS&#39;, serif, serif; font-size: 76%; font-style: normal; font-weight: normal;&quot;&gt;词&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.504em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;不妨将我们的多个猜测记为 h1 h2 .. （ h 代表 hypothesis），它们都属于一个有限且离散的猜测空间 H （单词总共就那么多而已），将用户实际输入的单词记为 D （Data ，即观测数据），应用贝叶斯公式：&lt;/p&gt;
&lt;div style=&quot;margin: 20px 0; text-align: center;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;div style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 16.615em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 12.557em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.031em 1000.003em 3.791em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 0.977em; height: 0px;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.626em 1000.003em 2.654em -0.43em); top: -2.486em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.492em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; top: -2.108em; left: 0.544em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-size: 70.7%; font-family:MathJax_Main, serif;&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.275em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;D&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic; padding-left: 0.273em;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 0.977em; height: 0px;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.626em 1000.003em 2.654em -0.43em); top: -2.486em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.492em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; top: -2.108em; left: 0.544em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-size: 70.7%; font-family:MathJax_Main, serif;&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.275em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;×&lt;/span&gt;&lt;span style=&quot;padding-left: 0.219em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;padding-left: 0.111em; padding-right: 0.111em;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 3.736em; height: 0px;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -3.352em; left: 50%; margin-left: -1.783em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;D&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 0.977em; height: 0px;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.626em 1000.003em 2.654em -0.43em); top: -2.486em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.492em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; top: -2.108em; left: 0.544em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-size: 70.7%; font-family:MathJax_Main, serif;&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.275em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -1.945em; left: 50%; margin-left: -1.188em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;D&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; clip: rect(0.869em 1000.003em 1.247em -0.484em); top: -1.296em; left: 0.003em;&quot;&gt;&lt;span style=&quot;border-left-width: 3.736em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0.003em;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 1.085em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 3.361em; vertical-align: -1.354em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;求最佳猜测这种场景中，对所有的猜测而言，&lt;span style=&quot;display:inline-block;margin:0&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 3.141em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 2.384em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;D&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的值都是一定的，我们在比较时可以忽略这个值，得到（符号 ∝ 表示 “正比例于”）：&lt;/p&gt;
&lt;div style=&quot;margin: 20px 0; text-align: center;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;div style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 16.074em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 12.178em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 0.977em; height: 0px;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.626em 1000.003em 2.654em -0.43em); top: -2.486em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.492em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; top: -2.108em; left: 0.544em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-size: 70.7%; font-family:MathJax_Main, serif;&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.275em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;D&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.273em;&quot;&gt;∝&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic; padding-left: 0.273em;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 0.977em; height: 0px;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.626em 1000.003em 2.654em -0.43em); top: -2.486em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.492em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; top: -2.108em; left: 0.544em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-size: 70.7%; font-family:MathJax_Main, serif;&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.275em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;×&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic; padding-left: 0.219em;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;D&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 0.977em; height: 0px;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.626em 1000.003em 2.654em -0.43em); top: -2.486em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.492em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; top: -2.108em; left: 0.544em;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-size: 70.7%; font-family:MathJax_Main, serif;&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.275em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;这个结论非常重要，它意味着对于给定观测数据，一个猜测是好是坏，取决于：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;display:inline-block;margin:0&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 2.817em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 2.113em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;h&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 猜测自身独立成立的可能性， 即猜测的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 8px; margin: 0 4px;&quot;&gt;先验概率&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;display:inline-block;margin:0&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 4.223em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 3.195em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;D&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;h&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 这个猜测下出现观察到的数据的可能性，又称为&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 8px; margin: 0 4px;&quot;&gt;似然 Likelihood&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;判断一个猜测的质量，往往就是这两个因素的拉锯。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;回到问题。对于一个猜测的单词，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 8px; margin: 0 4px;&quot;&gt;先验概率&lt;/code&gt; &lt;span style=&quot;display:inline-block;margin:0&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 2.817em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 2.113em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;h&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 指用户实际输入的单词是 h 的概率，这由 h 本身在文本中被使用的频繁程度决定。&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 8px; margin: 0 4px;&quot;&gt;似然&lt;/code&gt; &lt;span style=&quot;display:inline-block;margin:0&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 4.223em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 3.195em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;D&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;h&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 指用户想要输入 h，但却输错成了 D 的概率。比如单词 &#39;the&#39; 就比 &#39;thaw&#39; 更容易被打成 &#39;thew&#39;，因为 e 和 a 离得较远而且使用的指头相差一个指头（一个是中指一个是小指，不像 e 和 w 使用的指头靠在一块——神经科学的证据表明紧邻的身体设施之间容易串位）。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;对所有的候选单词都计算一下 &lt;span style=&quot;display:inline-block;margin:0&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span style=&quot;width: 8.498em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 6.442em; height: 0px; font-size: 132%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.734em 1000.003em 3.087em -0.43em); top: -2.649em; left: 0.003em;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;h&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif; padding-left: 0.219em;&quot;&gt;×&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic; padding-left: 0.219em;&quot;&gt;P&lt;span style=&quot;display: inline-block; overflow: hidden; height: 1px; width: 0.111em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;D&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Math, serif; font-style: italic;&quot;&gt;h&lt;/span&gt;&lt;span style=&quot;font-family:MathJax_Main, serif;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.654em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;border-left-width: 0.004em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.432em; vertical-align: -0.425em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，取最大值，就是最靠谱的猜测。&lt;/p&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 25px; margin-bottom: 15px; font-size: 18px;&quot;&gt;最大似然 &amp;amp; 奥卡姆剃刀&lt;/h4&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>背包问题</title>
      <link>place_your_blog_url_here/%E7%AE%97%E6%B3%95/2014/07/26/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98.html</link>
      <pubDate>26 Jul 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/%E7%AE%97%E6%B3%95/2014/07/26/背包问题</guid>
      <description>&lt;div style=&quot;line-height: 1.6; font-family: Helvetica Neue, Arial, Hiragino Sans GB, STHeiti, Microsoft YaHei, WenQuanYi Micro Hei, SimSun, Song, sans-serif;&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;本文主要讨论01背包/完全背包/多重背包，及在此之上一些常见的变种问题，更复杂的不做讨论。&lt;/p&gt;
&lt;h1 style=&quot;font-size: 36px; margin: 0.67em 0; font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px;&quot;&gt;一. 01背包&lt;/h1&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;1. 基础问法&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;01背包是所有类型背包问题的基础，它又有各式各样的问法和约束，这些变化同样适用于其他类型的背包问题。&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 15px 0; font-size: 14px; border-left: 5px solid #ddd; background-color: rgba(102, 128, 153, 0.05);&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;有n个物品，价值v = [v1,v2,v3...]，体积c = [c1,c2,c3...]，放入总容量为 &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #fff; white-space: nowrap; border-radius: 3px;&quot;&gt;totalCapacity&lt;/code&gt; 的背包中，求能获得的最大价值是多少？&lt;/p&gt;
&lt;/blockquote&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;背包问题是&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;动态规划&lt;/code&gt;的经典问题。动态规划的基础是递归，和分治一样，都是假设子问题已经解决，由子问题的解组合计算得到父问题的解，类似数列中的递推式如f(n) = f(n-1) + f(n-2)。但在递归的过程中会出现重复计算子问题的现象，为了避免重复计算，用一个表格记录子问题的结果供查找，&lt;em&gt;从下往上&lt;/em&gt;进行递推。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;找递推式（or 状态转移方程）的思路一般是由最终状态往前回溯，考察解答最终问题需要哪些子问题。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;背包问题应用动态规划：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;子问题&lt;/strong&gt;&lt;br/&gt;根据询问确定子问题，假设f[i][j] = 前i件物品中选取若干件放入空间为j的背包中所能得到的最大价值。&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;递推式&lt;/strong&gt;：  &lt;ul style=&quot;margin-top: 0; margin-bottom: 0; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;对第i件物品，不选择时，最大价值 = 前i-1件物品获得的最大价值 = f[i-1][j]；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;选择时，最大价值 = 前i-1件物品放入j-c[i]获得的最大价值 + i的价值 = f[i-1][j-c[i]] + v[i]；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;因此， &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;f[i][j] = max(f[i-1][j],f[i-1][j-c[i]] + v[i])&lt;/code&gt;；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;当然，若c[i] &amp;gt; 背包总空间j，物品i只能不选，此时和第一种情况一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;基础子问题的解&lt;/strong&gt;&lt;br/&gt;f[][0] = 背包空间为0时的最大价值（无法放物品） = 0，f[0][] = 没有物品可放时的最大价值 = 0（物品编号从1开始，0表示不放物品）。&lt;br/&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;注意，递推过程的是从第二行第二列开始的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;举个例子，当 c=[3,4,5], v=[4,5,6]，totalCapacity=10 时，推导过程如下，注意，顺序是&lt;strong style=&quot;font-weight: bold;&quot;&gt;从上到下，从左到右一行一行（自底向上）&lt;/strong&gt;地进行：&lt;/p&gt;
&lt;table style=&quot;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px;&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;c&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;v&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align: right; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;i&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;0&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;1&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;2&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;3&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;5&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;6&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;7&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;8&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;9&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;10&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;9&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;9&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;9&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;6&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;6&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;6&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;9&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;10&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;11&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;代码：&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;# coding=utf-8&lt;/span&gt;
n = &lt;span style=&quot;color: #ae81ff;&quot;&gt;3&lt;/span&gt;                   &lt;span style=&quot;color: #75715e;&quot;&gt;# n个物品&lt;/span&gt;
c = [&lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;3&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;4&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;5&lt;/span&gt;]        &lt;span style=&quot;color: #75715e;&quot;&gt;# capacity -- 注意，物品编号从1开始&lt;/span&gt;
v = [&lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;4&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;5&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;6&lt;/span&gt;]        &lt;span style=&quot;color: #75715e;&quot;&gt;# value&lt;/span&gt;
totalC = &lt;span style=&quot;color: #ae81ff;&quot;&gt;10&lt;/span&gt;             &lt;span style=&quot;color: #75715e;&quot;&gt;# total capacity&lt;/span&gt;

&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;zeroOne&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;
    t = [[&lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;] * (totalC + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(n+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) ]    &lt;span style=&quot;color: #75715e;&quot;&gt;# [n+1][totalCapacity+1]&lt;/span&gt;

    &lt;span style=&quot;color: #75715e;&quot;&gt;# 初始化&lt;/span&gt;
    t[&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;] = [&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;] * (totalC + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;)        &lt;span style=&quot;color: #75715e;&quot;&gt;# 第一行为0&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(n+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;):            &lt;span style=&quot;color: #75715e;&quot;&gt;# 第一列为0&lt;/span&gt;
        t[i][&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;] = &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;

    &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;,n+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;):             &lt;span style=&quot;color: #75715e;&quot;&gt;# 从第二行第二列开始扫描. i: 当前考察的物品, j: 总空间&lt;/span&gt;
        &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; j &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;,totalC+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;):
            &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; c[i] &amp;gt; j:            &lt;span style=&quot;color: #75715e;&quot;&gt;# 无法放入第i个物品 -- 必定不选&lt;/span&gt;
                t[i][j] = t[i-&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;][j]
            &lt;span style=&quot;color: #F92672;&quot;&gt;else&lt;/span&gt;:                    &lt;span style=&quot;color: #75715e;&quot;&gt;# 可以放入第i个物品 -- 可能选，可能不选&lt;/span&gt;
                t[i][j] = max(t[i-&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;][j], t[i-&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;][j-c[i]] + v[i])
    &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; t

&lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; __name__ == &lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:
    &lt;span style=&quot;color: #F92672;&quot;&gt;print&lt;/span&gt; zeroOne()[n][totalC]
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;时间和空间复杂度为O(n*totalCapacity)。&lt;/p&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;2 求最大价值时的物品选择方案&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;求最大价值下的物品选择方案有两种办法：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;从后面往前，根据递推式依次看第i..1个物品有没有被选择：  &lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt; t = zeroOne()
 &lt;span style=&quot;color: #75715e;&quot;&gt;# print path 方法1&lt;/span&gt;
 i = n
 j = totalC
 &lt;span style=&quot;color: #F92672;&quot;&gt;while&lt;/span&gt; i &amp;gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;and&lt;/span&gt; j &amp;gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;:
     &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; t[i][j] != t[i-&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;][j]:    &lt;span style=&quot;color: #75715e;&quot;&gt;# 选了第i个物品&lt;/span&gt;
         &lt;span style=&quot;color: #F92672;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;第%s个物品，空间：%s，价值：%s&quot;&lt;/span&gt; % (i,c[i],v[i])
         j -= c[i]
     &lt;span style=&quot;color: #75715e;&quot;&gt;# 考察前一个物品&lt;/span&gt;
     i -= &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;在求最大价值的同时用一个n*totalCapacity大小的二维数组path记录每个物品是否选择：&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;zeroOneWithPath&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;
t = [[&lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;] * (totalC + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(n+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) ]    &lt;span style=&quot;color: #75715e;&quot;&gt;# [n+1][totalCapacity+1]&lt;/span&gt;
path = [[&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;] * (totalC + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(n+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) ]        &lt;span style=&quot;color: #75715e;&quot;&gt;# path, 0没选，1选了&lt;/span&gt;

&lt;span style=&quot;color: #75715e;&quot;&gt;# 初始化&lt;/span&gt;
t[&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;] = [&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;] * (totalC + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;)        &lt;span style=&quot;color: #75715e;&quot;&gt;# 第一行为0&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(n+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;):            &lt;span style=&quot;color: #75715e;&quot;&gt;# 第一列为0&lt;/span&gt;
    t[i][&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;] = &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;

&lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;,n+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;):             &lt;span style=&quot;color: #75715e;&quot;&gt;# 从第二行第二列开始扫描. i: 当前考察的物品, j: 总空间&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; j &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;,totalC+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;):
        &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; c[i] &amp;gt; j:            &lt;span style=&quot;color: #75715e;&quot;&gt;# 无法放入第i个物品 -- 必定不选&lt;/span&gt;
            t[i][j] = t[i-&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;][j]
        &lt;span style=&quot;color: #F92672;&quot;&gt;else&lt;/span&gt;:                    &lt;span style=&quot;color: #75715e;&quot;&gt;# 可以放入第i个物品 -- 可能不选，可能选&lt;/span&gt;
            t[i][j] = max(t[i-&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;][j], t[i-&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;][j-c[i]] + v[i])
            &lt;span style=&quot;color: #75715e;&quot;&gt;# 如果选择了第i个物品，记录path         &lt;/span&gt;
            &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; t[i][j] == t[i-&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;][j-c[i]] + v[i]:        &lt;span style=&quot;color: #75715e;&quot;&gt;# &amp;lt;----- 只有这一个改动&lt;/span&gt;
                path[i][j] = &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;

&lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; t,path
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;求物品选择方案的方法和前一种办法是一模一样的，只不过现在是根据path中的标记位，而不是最大价值与递推式来判断是否选择了该物品：&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;# print path 方法2&lt;/span&gt;
t,path = zeroOneWithPath()
i = n
j = totalC
&lt;span style=&quot;color: #F92672;&quot;&gt;while&lt;/span&gt; i &amp;gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;and&lt;/span&gt; j &amp;gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;:
    &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; path[i][j] == &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;:    &lt;span style=&quot;color: #75715e;&quot;&gt;# 选了第i个物品             # &amp;lt;----- 只有这一个改动&lt;/span&gt;
        &lt;span style=&quot;color: #F92672;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;第%s个物品，空间：%s，价值：%s&quot;&lt;/span&gt; % (i,c[i],v[i])
        j -= c[i]
    i -= &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;实际上，两种方法的思路是一样的，不过方法2消耗的空间更多，但下面要讲的O(n)空间复杂度的算法只能使用方法2。&lt;/p&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;3 空间优化&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;接下来讨论怎样将算法的空间复杂度降低到O(totalCapacity)。实际上，这里用到的思路就是所谓的 &lt;em&gt;滚动数组&lt;/em&gt;：&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 15px 0; font-size: 14px; border-left: 5px solid #ddd; background-color: rgba(102, 128, 153, 0.05);&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;很多情况下，一个问题的解仅由其前面&lt;em&gt;有限个&lt;/em&gt;子问题决定，除了这些子问题，之前记录的规模更小的子问题的解都可以舍去，所以，可以用更少的空间只保存这些子问题的解并循环利用，从而避免保存所有子问题的解。&lt;/p&gt;
&lt;/blockquote&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;举个例子，斐波那契数列问题中，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;f(n)=f(n-1)+f(n-2)&lt;/code&gt;，当n为5时，f(5)仅与f(4)和f(3)有关，f(0)..f(2)都没有用了。因此，我们可以只用两个变量不停地维护f(n-1)和f(n-2)，而不是将f(0)..f(n-1)的结果都保存起来。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;回到01背包问题，求某个格子时，&lt;strong style=&quot;font-weight: bold;&quot;&gt;其值是由上一行的某两个格子（正上方的格子和左侧某一个格子）决定的，与更早的行没有关系&lt;/strong&gt;，这些行的空间都被浪费了：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./屏幕快照 2014-06-28 上午10.28.16.png&quot; name=&quot;15005da7-e83b-4f26-bc09-762e40a44d89&quot; src=&quot;/assets/img/96b34a556ac94118fb00722e00620749.png&quot; style=&quot;border: 0; max-width: 100%;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;所以，我们可以只用一行的空间保存前一行的值并循环利用，而不需要一个表格。但此时 &lt;strong style=&quot;font-weight: bold;&quot;&gt;递推顺序不能是从左到右了，而是应该反过来&lt;/strong&gt;，因为如果是正序，在递推的时候用的就是第i行的新值，而非前一行的数据了。实际上，用表格时也可以从右到左递推。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;代码：&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;zeroOne2&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;
    t = [&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;] * (totalC + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;)
    &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;,n+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;):        &lt;span style=&quot;color: #75715e;&quot;&gt;# for i in 1..n, i是物品编号&lt;/span&gt;
        &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; j &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; reversed(range(c[i],totalC+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;)):    &lt;span style=&quot;color: #75715e;&quot;&gt;# for j in totalC..c[i], j是背包总空间 //j&amp;lt;物品体积c[i]时，i必定不选，c[i][j]=c[i-1][j]，不用考察&lt;/span&gt;
            t[j] = max(t[j],t[j-c[i]] + v[i]) 
    &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; t

&lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; __name__ == &lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:
    &lt;span style=&quot;color: #F92672;&quot;&gt;print&lt;/span&gt; zeroOne2()[totalC]
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;时间复杂度仍为O(n*totalCapacity)，空间复杂度降低到了O(totalCapacity)。此时如果想要求最优价值的物品选择方案，只能用额外的path表格记录。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;此类优化方式大部分的背包问题都可应用，后续不再赘述。&lt;/p&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;4 要求刚好装满&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;背包问题常见的一个限制是需要背包刚好装满，在该约束下需要注意两点：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;在使用递推式推导的过程中必须考虑 &lt;strong style=&quot;font-weight: bold;&quot;&gt;子问题是否有解&lt;/strong&gt; ;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;基础子问题的含义/解&lt;/strong&gt;&lt;br/&gt; 当求最大价值时，规定当无解时用NULL表示，其他值表示刚好能装满的最大价值：&lt;ul style=&quot;margin-top: 0; margin-bottom: 0; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;第一列 f[][0] = 背包空间为0，认为永远是满的，且无法放物品 = 0  &lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;第一行（除第一个） f[0][1..totalCapacity] = 没有物品可放，此时除了空间为0的背包，其他背包永远不可能放满 = NULL&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;其他变种问题类似。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;以上两点适用于所有需要装满背包的场景。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;求最大价值的推导过程如下：&lt;/p&gt;
&lt;table style=&quot;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px;&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;c&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;v&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align: right; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;i&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;0&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;1&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;2&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;3&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;5&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;6&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;7&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;8&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;9&lt;/th&gt;
&lt;th style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;10&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Null&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Null&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Null&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Null&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Null&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Null&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Null&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Null&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Null&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Null&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;9&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;6&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;6&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;9&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;10&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;11&lt;/td&gt;
&lt;td style=&quot;text-align: center; padding: 8px; line-height: 20px; vertical-align: top; border: 1px solid #DDD;&quot;&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;代码：&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;zeroOneFullPack&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;
    t = [[&lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;] * (totalC + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(n+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) ]    &lt;span style=&quot;color: #75715e;&quot;&gt;# [n+1][totalCapacity+1]&lt;/span&gt;

    &lt;span style=&quot;color: #75715e;&quot;&gt;# 初始化&lt;/span&gt;
    t[&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;] = [&lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;] * (totalC + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;)    &lt;span style=&quot;color: #75715e;&quot;&gt;# t[0][1..totalCapacity] = None&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(n+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;):            &lt;span style=&quot;color: #75715e;&quot;&gt;# t[][0] = 0&lt;/span&gt;
        t[i][&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;] = &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;

    &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;,n+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;):         
        &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; j &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;,totalC+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;):
            &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; c[i] &amp;gt; j:            &lt;span style=&quot;color: #75715e;&quot;&gt;# 无法放入第i个物品 -- 必定不选&lt;/span&gt;
                t[i][j] = t[i-&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;][j]
            &lt;span style=&quot;color: #F92672;&quot;&gt;else&lt;/span&gt;:                   &lt;span style=&quot;color: #75715e;&quot;&gt;# 可以放入第i个物品&lt;/span&gt;
                a = t[i-&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;][j-c[i]]  &lt;span style=&quot;color: #75715e;&quot;&gt;# a: 前i-1个物品放入j-c[i]空间&lt;/span&gt;
                b = t[i-&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;][j]       &lt;span style=&quot;color: #75715e;&quot;&gt;# b: 前i-1个物品放入j空间&lt;/span&gt;

                &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; a != &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;and&lt;/span&gt; b != &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;:     &lt;span style=&quot;color: #75715e;&quot;&gt;# a和b都有解，则用递推式&lt;/span&gt;
                    t[i][j] = max(b,a + v[i])
                &lt;span style=&quot;color: #F92672;&quot;&gt;elif&lt;/span&gt; a == &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;and&lt;/span&gt; b == &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;:   &lt;span style=&quot;color: #75715e;&quot;&gt;# a和b都无解，则无解   &lt;/span&gt;
                    t[i][j] = &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;
                &lt;span style=&quot;color: #F92672;&quot;&gt;elif&lt;/span&gt; a == &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;:                 &lt;span style=&quot;color: #75715e;&quot;&gt;# a无解而b有解，此时一定不能选择物品i，选择则无解&lt;/span&gt;
                    t[i][j] = b
                &lt;span style=&quot;color: #F92672;&quot;&gt;elif&lt;/span&gt; b == &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;:                 &lt;span style=&quot;color: #75715e;&quot;&gt;# a有解而b无解，此时只能选择i，不选则无解&lt;/span&gt;
                    t[i][j] = a + v[i]
    &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; t

&lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; __name__ == &lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:
    &lt;span style=&quot;color: #F92672;&quot;&gt;print&lt;/span&gt; zeroOneFullPack()[n][totalC]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;5 只考虑物品空间，忽略价值&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;有时题目只关心物品的体积，而不涉及物品的价值，下面提到的几类问题都是如此。&lt;/p&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;5.1 求能获取的最大体积&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;比较常见，简化的01背包问题，每个物品的价值即为其体积，代码略。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;例子：  &lt;/p&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;给一个整数的集合，要把它分成两个集合，要两个集合的数的和最接近&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;5.2 求刚好装满背包的方案数&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;类似的：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;子问题&lt;/strong&gt;&lt;br/&gt; f[i][j]为前i件物品放入j空间，刚好装满的方案数，无解时为0&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;递推式&lt;/strong&gt; &lt;ul style=&quot;margin-top: 0; margin-bottom: 0; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;f[i][j] = f[i-1][j] (不选i) + f[i-1][j-c[i]] (选i)&lt;/code&gt;&lt;br/&gt;如果不选i，&quot;前i件物品装满j空间的方案数&quot; 等于 &quot;前i-1件物品装满j空间的方案数&quot; ；选i，则等于&quot;前i-1件物品装满j-c[i]空间的方案数&quot;。二者相加即为f[i][j]。&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;c[i] &amp;gt; j时一定不能选i，f[i][j] = f[i-1][j]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;基础子问题的解&lt;/strong&gt;&lt;br/&gt; 和 &lt;em&gt;求装满条件下最大价值&lt;/em&gt; 的场景一样，&lt;ul style=&quot;margin-top: 0; margin-bottom: 0; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;第一列 f[][0] = 背包空间为0，认为永远是满的，只有一种装满的方案（不放物品） = 1&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;第一行（除第一个） f[0][1..totalCapacity] = 没有物品可放，此时除了空间为0的背包，其他背包永远不可能放满 = 0 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;waysToFillPack&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;
    t = [[&lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;] * (totalC + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(n+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) ]    &lt;span style=&quot;color: #75715e;&quot;&gt;# [n+1][totalCapacity+1]&lt;/span&gt;

    &lt;span style=&quot;color: #75715e;&quot;&gt;# 初始化&lt;/span&gt;
    t[&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;] = [&lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;] * (totalC + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;)    &lt;span style=&quot;color: #75715e;&quot;&gt;# t[0][1..totalCapacity] = None&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(n+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;):            &lt;span style=&quot;color: #75715e;&quot;&gt;# t[][0] = 1&lt;/span&gt;
        t[i][&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;] = &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;

    &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;,n+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;):         
        &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; j &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;,totalC+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;):
            &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; c[i] &amp;gt; j:            &lt;span style=&quot;color: #75715e;&quot;&gt;# 无法放入第i个物品 -- 必定不选&lt;/span&gt;
                t[i][j] = t[i-&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;][j]
            &lt;span style=&quot;color: #F92672;&quot;&gt;else&lt;/span&gt;:
                a = t[i-&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;][j-c[i]]  &lt;span style=&quot;color: #75715e;&quot;&gt;# a: 前i-1个物品放入j-c[i]空间&lt;/span&gt;
                b = t[i-&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;][j]       &lt;span style=&quot;color: #75715e;&quot;&gt;# b: 前i-1个物品放入j空间&lt;/span&gt;

                &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; a != &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;and&lt;/span&gt; b != &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;:     &lt;span style=&quot;color: #75715e;&quot;&gt;# a和b都有解，则用递推式    &amp;lt;---- 仅仅递推式不同而已&lt;/span&gt;
                    t[i][j] = a + b
                &lt;span style=&quot;color: #F92672;&quot;&gt;elif&lt;/span&gt; a == &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;and&lt;/span&gt; b == &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;:   &lt;span style=&quot;color: #75715e;&quot;&gt;# a和b都无解，则无解   &lt;/span&gt;
                    t[i][j] = &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;
                &lt;span style=&quot;color: #F92672;&quot;&gt;elif&lt;/span&gt; a == &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;:                 &lt;span style=&quot;color: #75715e;&quot;&gt;# a无解而b有解，此时一定不能选择物品i&lt;/span&gt;
                    t[i][j] = b
                &lt;span style=&quot;color: #F92672;&quot;&gt;elif&lt;/span&gt; b == &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;:                 &lt;span style=&quot;color: #75715e;&quot;&gt;# a有解而b无解，此时只能选择i&lt;/span&gt;
                    t[i][j] = a

    &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; t
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;例子：  &lt;/p&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;有不同面额的若干钱币，每种面额只有一个，求表示给定面值的方案数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;5.3 求刚好装满背包的最少/多选择物品数&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;以最少为例：  &lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;子问题&lt;/strong&gt;&lt;br/&gt; f[i][j]为前i件物品放入j空间，刚好装满的最少物品数，用None表示无解&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;递推式&lt;/strong&gt; &lt;ul style=&quot;margin-top: 0; margin-bottom: 0; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;f[i][j] = min{ f[i-1][j] (不选i), f[i-1][j-c[i]] + 1 (选i) }&lt;/code&gt; &lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;c[i] &amp;gt; j时一定不能选i，f[i][j] = f[i-1][j]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;基础子问题的解&lt;/strong&gt; &lt;ul style=&quot;margin-top: 0; margin-bottom: 0; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;第一列 f[][0] = 背包空间为0，认为永远是满的，选择物品数为0 = 0&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;第一行（除第一个） f[0][1..totalCapacity] = 没有物品可放，此时除了空间为0的背包，其他背包不存在装满的方案 = None &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;# 装满时的最少物品数&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;leastObjFillPack&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;
    t = [[&lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;] * (totalC + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(n+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) ]    &lt;span style=&quot;color: #75715e;&quot;&gt;# [n+1][totalCapacity+1]&lt;/span&gt;

    &lt;span style=&quot;color: #75715e;&quot;&gt;# 初始化&lt;/span&gt;
    t[&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;] = [&lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;] * (totalC + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;)    &lt;span style=&quot;color: #75715e;&quot;&gt;# t[0][1..totalCapacity] = None&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(n+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;):            &lt;span style=&quot;color: #75715e;&quot;&gt;# t[][0] = 0&lt;/span&gt;
        t[i][&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;] = &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;

    &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;,n+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;):         
        &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; j &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; range(&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;,totalC+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;):
            &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; c[i] &amp;gt; j:            &lt;span style=&quot;color: #75715e;&quot;&gt;# 无法放入第i个物品 -- 必定不选&lt;/span&gt;
                t[i][j] = t[i-&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;][j]
            &lt;span style=&quot;color: #F92672;&quot;&gt;else&lt;/span&gt;:
                a = t[i-&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;][j-c[i]]  &lt;span style=&quot;color: #75715e;&quot;&gt;# a: 前i-1个物品放入j-c[i]空间&lt;/span&gt;
                b = t[i-&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;][j]       &lt;span style=&quot;color: #75715e;&quot;&gt;# b: 前i-1个物品放入j空间&lt;/span&gt;

                &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; a != &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;and&lt;/span&gt; b != &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;:     &lt;span style=&quot;color: #75715e;&quot;&gt;# a和b都有解，则用递推式&lt;/span&gt;
                    t[i][j] = min(b,a+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;)
                &lt;span style=&quot;color: #F92672;&quot;&gt;elif&lt;/span&gt; a == &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;and&lt;/span&gt; b == &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;:   &lt;span style=&quot;color: #75715e;&quot;&gt;# a和b都无解，则无解   &lt;/span&gt;
                    t[i][j] = &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;
                &lt;span style=&quot;color: #F92672;&quot;&gt;elif&lt;/span&gt; a == &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;:                 &lt;span style=&quot;color: #75715e;&quot;&gt;# a无解而b有解，此时一定不能选择物品i&lt;/span&gt;
                    t[i][j] = b
                &lt;span style=&quot;color: #F92672;&quot;&gt;elif&lt;/span&gt; b == &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;:                 &lt;span style=&quot;color: #75715e;&quot;&gt;# a有解而b无解，此时只能选择i&lt;/span&gt;
                    t[i][j] = a + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;

    &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; t
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;例子：  &lt;/p&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;有不同面额的若干硬币，每种面额只有一个，求最少需要多少硬币表示给定面值&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;除了上述几种情况，背包问题还有很多其他变种，不过基本思路和递推过程都是一样的，其核心都在于 1)根据询问的不同找到正确的递推式（&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;min|max|sum...&lt;/code&gt;）；2)确定基础子问题的解。&lt;/p&gt;
&lt;h1 style=&quot;font-size: 36px; margin: 0.67em 0; font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px;&quot;&gt;二. 完全背包&lt;/h1&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;1. 基本解法&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;完全背包指每种物品有无数件，它和01背包的区别只有递推式的一个地方：&lt;/p&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;01  : f[i][j] = max(f[i-1][j],&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;f[i-1][j-c[i]]&lt;/code&gt; + v[i])&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;完全：f[i][j] = max(f[i-1][j],&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;f[i][j-c[i]]&lt;/code&gt; + v[i])&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;解释：&lt;br/&gt;考虑第i种物品，若不选，则f[i][j] = f[i-1][j]；若选择，意味着至少有一件i物品，考虑这一件物品，剩余j-c[i]空间用来放 &lt;em&gt;0..i种&lt;/em&gt; 物品（i依然能放），这部分空间的最大价值为f[i][j-c[i]]。综合即可得到上述公式。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;直观的，在递推时，01背包依赖的是&lt;strong style=&quot;font-weight: bold;&quot;&gt;上一行的某两个格子（正上方和左侧）&lt;/strong&gt;，完全背包则依赖&lt;strong style=&quot;font-weight: bold;&quot;&gt;上一行正上方的格子 + 同一行左侧的某个格子&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;2. 空间优化&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;与01背包类似，但是这里遍历顺序 &lt;strong style=&quot;font-weight: bold;&quot;&gt;不要逆序&lt;/strong&gt; 了，即此时需要从左向右递推。因为01背包递推时f[i-1][j-c[i]]是上一行的值，而完全背包f[i][j-c[i]]则刚好是本行的新值。&lt;/p&gt;
&lt;h1 style=&quot;font-size: 36px; margin: 0.67em 0; font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px;&quot;&gt;三. 多重背包&lt;/h1&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;指的是第i个物品有n[i]件，此时直观上可以将每个物品拆成n[i]个单个物品，转化为01背包问题。但当n[i]比较大时物品件数将急剧增加，为了避免这种情况可以使用 &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px;&quot;&gt;二进制拆分法&lt;/code&gt;，降低拆分后的物品数。&lt;/p&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;1. 二进制拆分&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;原理：&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 15px 0; font-size: 14px; border-left: 5px solid #ddd; background-color: rgba(102, 128, 153, 0.05);&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;一个正整数n可以被分解成1,2,4,…,2^(k-1),n-(2^k+1)(即n-前面数的和), k是满足n&amp;gt;2^k+1的最大整数，且1～n之内的所有整数均可以唯一表示成这些数中某几个数的和的形式。&lt;/p&gt;
&lt;/blockquote&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;代码更容易理解些：&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;var&lt;/span&gt; result = [];
&lt;span style=&quot;color: #F92672;&quot;&gt;var&lt;/span&gt; n = ..;

&lt;span style=&quot;color: #75715e;&quot;&gt;// 1,2,4,8...直到&amp;gt;n (不包括最后一个数字)&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt;(i=&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;;i&amp;lt;=n;i*=&lt;span style=&quot;color: #ae81ff;&quot;&gt;2&lt;/span&gt;){
    result.push(i);
    n-=i;
}

&lt;span style=&quot;color: #75715e;&quot;&gt;// n剩下的部分&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt;(n&amp;gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;)
    result.push(n);
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;比如13可以拆分成1/2/4/6，1～13均可由这些数凑成。将件数为13，价值为v的物品拆分成1*v,2*v,4*v,6*v这4件物品后，&lt;strong style=&quot;font-weight: bold;&quot;&gt;该物品的任意选择（1件/2件..13件）均可由它们表达&lt;/strong&gt;，如选择10件该物品 = 选择物品4*v + 选择物品6*v。和简单拆分相比，该拆分方式不但达到了同样的效果，拆分后的个数也由n下降到log2(n)，即n的二进制表示的位数。&lt;/p&gt;
&lt;h1 style=&quot;font-size: 36px; margin: 0.67em 0; font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px;&quot;&gt;参考文档&lt;/h1&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://blog.csdn.net/wumuzi520/article/category/942383&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;背包问题——“01背包”详解及实现（包含背包中具体物品的求解）&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://dongxicheng.org/structure/knapsack-problems/&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;背包问题应用&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://blog.csdn.net/jkay_wong/article/details/7240588&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;多重背包的二进制分解思想&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>网卡中断负载均衡</title>
      <link>place_your_blog_url_here/c%E5%92%8Cos/2014/07/26/%E7%BD%91%E5%8D%A1%E4%B8%AD%E6%96%AD%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.html</link>
      <pubDate>26 Jul 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/c%E5%92%8Cos/2014/07/26/网卡中断负载均衡</guid>
      <description>&lt;div style=&quot;line-height: 1.6; font-family: Helvetica Neue, Arial, Hiragino Sans GB, STHeiti, Microsoft YaHei, WenQuanYi Micro Hei, SimSun, Song, sans-serif;&quot;&gt;
&lt;h1 style=&quot;font-size: 36px; margin: 0.67em 0; font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px;&quot;&gt;1. CPU 的 Exception&lt;/h1&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;interrupt 中断&lt;/code&gt;，硬件发起，异步的（即独立于CPU），下面3种都是同步的（必须由CPU执行某条指令触发）；这是本文关注的重点。&lt;/p&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;fault&lt;/code&gt;，可能可以恢复，处理后返回引起错误的指令，如Page Fault。&lt;/p&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;abort&lt;/code&gt;，无法恢复，不返回。&lt;/p&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;trap / system call&lt;/code&gt;，程序主动发起，调用操作系统服务的方式，返回下一条指令。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;Exception 的handler都是运行在内核空间的，CPU必须立即响应 exception，处理过程可以简单地认为按如下方式进行：保存现场 -- 执行处理函数 -- 恢复现场继续执行。&lt;/p&gt;
&lt;h1 style=&quot;font-size: 36px; margin: 0.67em 0; font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px;&quot;&gt;2. 硬中断和软中断&lt;/h1&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;响应中断时通常会关闭中断，因此处理函数必须快速返回，保证不会丢失其他设备的中断信号。因此通常将中断响应函数划分为两个部分，上半部分就是所谓的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;硬中断&lt;/code&gt;，它只做少量最重要的事以保证快速返回，并在返回前发起对下半部分的调度。下半部分负责其他耗时的工作，它和硬中断的区别在于它在执行时是开中断的，并且是异步的，不能保证在硬中断之后立刻被执行。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;Linux对“下半部分”的实现有3种方式：&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;softirq&lt;/code&gt;/&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;tasklet&lt;/code&gt;/&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;bottom half&lt;/code&gt;，统称为&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;deferrable functions&lt;/code&gt;。其中，tasklet是基于softirq实现的，而bottom half又是基于tasklet实现的。实际上在很多场景下，都使用 softirq（软中断）这个术语来描述所有的deferrable functions（中断处理的下半部分）。这三者的区别主要在并发性上：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;Softirq&lt;/code&gt; Softirqs of the same type can run concurrently on several CPUs&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;Tasklet&lt;/code&gt; Tasklets of different types can run concurrently on several CPUs, but tasklets of the same type cannot&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;Bottom Half&lt;/code&gt;Bottom halves cannot run concurrently on several CPUs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;Linux2.4中仅预定义了4个softirq:&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;HI_SOFTIRQ   用于实现bottom half&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;TASKLET_SOFTIRQ   用于实现tasklet&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;NET_TX_SOFTIRQ    发送网络数据&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;NET_RX_SOFTIRQ    接收网络数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;softirq&lt;/code&gt;的相关函数:&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;open_softirq(NET_RX_SOFTIRQ,net_rx_action,null)&lt;/code&gt;：定义softirq和处理函数；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;__cpu_raise_softirq(cpu,NET_RX_SOFTIRQ)&lt;/code&gt;：在指定cpu设置标志位，激活特定类型的softirq，该函数被硬中断调用；默认遵循“谁触发谁执行”的原则，哪个cpu处理硬中断则继续处理发起的softirq；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;do_softirq()&lt;/code&gt;：cpu在某些特定的时间点检查自己的softirq标志位，当发现有pending的softirq时则调用该函数处理pending softirq。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;可以看到，deferrable functions(大部分语境下的“软中断”)是操作系统模拟硬件中断方式实现异步任务的一种机制，它和硬件中断执行的机制具有本质的区别。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;参考：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://anselmo.homeunix.net/OReilly/books/linuxkernel2/036.htm&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;Softirqs, Tasklets, and Bottom Halves&lt;/a&gt; -- 对这3类deferrable functions做了详细的介绍&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://wenku.baidu.com/view/45acdceb4afe04a1b071deed.html&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;Linux操作系统 - 中断、异常及系统调用&lt;/a&gt; --  国防科技大学操作系统ppt，详细解释了中断/异常的概念及其处理流程，非常推荐&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 style=&quot;font-size: 36px; margin: 0.67em 0; font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px;&quot;&gt;3. 查看系统的中断情况&lt;/h1&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;查看硬中断：&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;cat /proc/interrupts&lt;/code&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;从左到右依次是irq的序号， 在各自cpu上发生中断的次数，可编程中断控制器，设备名称。其中ath9k是我的无线网卡，eth0是有线网卡（未使用）。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1406379059016.png&quot; name=&quot;24b154ee-4a53-4d3a-9b7f-0207af9cf87a&quot; src=&quot;/assets/img/1daa9f9a0a2844703bcf0331a5d17146.png&quot; style=&quot;border: 0; max-width: 100%; border-radius: 8px;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;机器的cpu为：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1406379070813.png&quot; name=&quot;4df2e821-1154-4969-bc67-5370f9ea943d&quot; src=&quot;/assets/img/6808303831e63801f26dd1ab7ec31fca.png&quot; style=&quot;border: 0; max-width: 100%; border-radius: 8px;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;的确有4个逻辑核心。 &lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;软中断可以从 &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;/proc/softirqs&lt;/code&gt; 了解到:&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap; background: transparent;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 8px; display: block; background: #23241f; margin: 0 4px;&quot;&gt;anderson&lt;span style=&quot;color: #f8f8f2;&quot;&gt;@anderson&lt;/span&gt;-&lt;span style=&quot;color: #F92672;&quot;&gt;nb:&lt;/span&gt;~&lt;span style=&quot;color: #f8f8f2;&quot;&gt;$ &lt;/span&gt;cat /proc/softirqs
                    &lt;span style=&quot;color: #66d9ef;&quot;&gt;CPU0&lt;/span&gt;       &lt;span style=&quot;color: #66d9ef;&quot;&gt;CPU1&lt;/span&gt;       &lt;span style=&quot;color: #66d9ef;&quot;&gt;CPU2&lt;/span&gt;       &lt;span style=&quot;color: #66d9ef;&quot;&gt;CPU3&lt;/span&gt;       
          &lt;span style=&quot;color: #66d9ef;&quot;&gt;HI&lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;:&lt;/span&gt;          &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;          &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;          &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;          &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;
       &lt;span style=&quot;color: #66d9ef;&quot;&gt;TIMER&lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;:&lt;/span&gt;     &lt;span style=&quot;color: #ae81ff;&quot;&gt;890234&lt;/span&gt;     &lt;span style=&quot;color: #ae81ff;&quot;&gt;858500&lt;/span&gt;     &lt;span style=&quot;color: #ae81ff;&quot;&gt;620927&lt;/span&gt;     &lt;span style=&quot;color: #ae81ff;&quot;&gt;519799&lt;/span&gt;
      &lt;span style=&quot;color: #66d9ef;&quot;&gt;NET_TX&lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;:&lt;/span&gt;       &lt;span style=&quot;color: #ae81ff;&quot;&gt;3702&lt;/span&gt;       &lt;span style=&quot;color: #ae81ff;&quot;&gt;3602&lt;/span&gt;       &lt;span style=&quot;color: #ae81ff;&quot;&gt;2132&lt;/span&gt;       &lt;span style=&quot;color: #ae81ff;&quot;&gt;1030&lt;/span&gt;
      &lt;span style=&quot;color: #66d9ef;&quot;&gt;NET_RX&lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;:&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;2257833&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;1430762&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;2507556&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;1331708&lt;/span&gt;
       &lt;span style=&quot;color: #66d9ef;&quot;&gt;BLOCK&lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;:&lt;/span&gt;     &lt;span style=&quot;color: #ae81ff;&quot;&gt;119552&lt;/span&gt;         &lt;span style=&quot;color: #ae81ff;&quot;&gt;82&lt;/span&gt;       &lt;span style=&quot;color: #ae81ff;&quot;&gt;5661&lt;/span&gt;         &lt;span style=&quot;color: #ae81ff;&quot;&gt;88&lt;/span&gt;
&lt;span style=&quot;color: #66d9ef;&quot;&gt;BLOCK_IOPOLL&lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;:&lt;/span&gt;          &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;          &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;          &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;          &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;
     &lt;span style=&quot;color: #66d9ef;&quot;&gt;TASKLET&lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;:&lt;/span&gt;      &lt;span style=&quot;color: #ae81ff;&quot;&gt;42915&lt;/span&gt;     &lt;span style=&quot;color: #ae81ff;&quot;&gt;332662&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;1223525&lt;/span&gt;     &lt;span style=&quot;color: #ae81ff;&quot;&gt;369765&lt;/span&gt;
       &lt;span style=&quot;color: #66d9ef;&quot;&gt;SCHED&lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;:&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;1081723&lt;/span&gt;     &lt;span style=&quot;color: #ae81ff;&quot;&gt;796010&lt;/span&gt;     &lt;span style=&quot;color: #ae81ff;&quot;&gt;342065&lt;/span&gt;     &lt;span style=&quot;color: #ae81ff;&quot;&gt;241437&lt;/span&gt;
     &lt;span style=&quot;color: #66d9ef;&quot;&gt;HRTIMER&lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;:&lt;/span&gt;       &lt;span style=&quot;color: #ae81ff;&quot;&gt;4055&lt;/span&gt;       &lt;span style=&quot;color: #ae81ff;&quot;&gt;4011&lt;/span&gt;       &lt;span style=&quot;color: #ae81ff;&quot;&gt;2386&lt;/span&gt;       &lt;span style=&quot;color: #ae81ff;&quot;&gt;2199&lt;/span&gt;
         &lt;span style=&quot;color: #66d9ef;&quot;&gt;RCU&lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;:&lt;/span&gt;     &lt;span style=&quot;color: #ae81ff;&quot;&gt;789493&lt;/span&gt;     &lt;span style=&quot;color: #ae81ff;&quot;&gt;766554&lt;/span&gt;     &lt;span style=&quot;color: #ae81ff;&quot;&gt;705107&lt;/span&gt;     &lt;span style=&quot;color: #ae81ff;&quot;&gt;624903&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;也可以用 &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;mpstat&lt;/code&gt; 工具对系统做实时监控，查看各个cpu上softirq的百分比：&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap; background: transparent;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 8px; display: block; background: #23241f; margin: 0 4px;&quot;&gt;anderson&lt;span style=&quot;color: #f8f8f2;&quot;&gt;@anderson&lt;/span&gt;-nb:~$ mpstat -P ALL &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;
Linux &lt;span style=&quot;color: #ae81ff;&quot;&gt;3.5&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;-&lt;span style=&quot;color: #ae81ff;&quot;&gt;37&lt;/span&gt;-generic (anderson-nb)    &lt;span style=&quot;color: #ae81ff;&quot;&gt;2013&lt;/span&gt;年08月&lt;span style=&quot;color: #ae81ff;&quot;&gt;04&lt;/span&gt;日     _i686&lt;span style=&quot;color: #ae81ff;&quot;&gt;_&lt;/span&gt;  (&lt;span style=&quot;color: #ae81ff;&quot;&gt;4&lt;/span&gt; CPU)

&lt;span style=&quot;color: #ae81ff;&quot;&gt;17&lt;/span&gt;时&lt;span style=&quot;color: #ae81ff;&quot;&gt;34&lt;/span&gt;分&lt;span style=&quot;color: #ae81ff;&quot;&gt;35&lt;/span&gt;秒  CPU    &lt;span style=&quot;color: #f8f8f2;&quot;&gt;%usr&lt;/span&gt;   &lt;span style=&quot;color: #f8f8f2;&quot;&gt;%nice&lt;/span&gt;    &lt;span style=&quot;color: #f8f8f2;&quot;&gt;%sys&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;%iowait&lt;/span&gt;    &lt;span style=&quot;color: #f8f8f2;&quot;&gt;%irq&lt;/span&gt;   &lt;span style=&quot;color: #f8f8f2;&quot;&gt;%soft&lt;/span&gt;  &lt;span style=&quot;color: #f8f8f2;&quot;&gt;%steal&lt;/span&gt;  &lt;span style=&quot;color: #f8f8f2;&quot;&gt;%guest&lt;/span&gt;   &lt;span style=&quot;color: #f8f8f2;&quot;&gt;%idle&lt;/span&gt;
&lt;span style=&quot;color: #ae81ff;&quot;&gt;17&lt;/span&gt;时&lt;span style=&quot;color: #ae81ff;&quot;&gt;34&lt;/span&gt;分&lt;span style=&quot;color: #ae81ff;&quot;&gt;36&lt;/span&gt;秒  all    &lt;span style=&quot;color: #ae81ff;&quot;&gt;7.05&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;1.01&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;   &lt;span style=&quot;color: #ae81ff;&quot;&gt;91.94&lt;/span&gt;
&lt;span style=&quot;color: #ae81ff;&quot;&gt;17&lt;/span&gt;时&lt;span style=&quot;color: #ae81ff;&quot;&gt;34&lt;/span&gt;分&lt;span style=&quot;color: #ae81ff;&quot;&gt;36&lt;/span&gt;秒    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;   &lt;span style=&quot;color: #ae81ff;&quot;&gt;22.22&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;1.01&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;   &lt;span style=&quot;color: #ae81ff;&quot;&gt;76.77&lt;/span&gt;
&lt;span style=&quot;color: #ae81ff;&quot;&gt;17&lt;/span&gt;时&lt;span style=&quot;color: #ae81ff;&quot;&gt;34&lt;/span&gt;分&lt;span style=&quot;color: #ae81ff;&quot;&gt;36&lt;/span&gt;秒    &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;3.00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;1.00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;   &lt;span style=&quot;color: #ae81ff;&quot;&gt;96.00&lt;/span&gt;
&lt;span style=&quot;color: #ae81ff;&quot;&gt;17&lt;/span&gt;时&lt;span style=&quot;color: #ae81ff;&quot;&gt;34&lt;/span&gt;分&lt;span style=&quot;color: #ae81ff;&quot;&gt;36&lt;/span&gt;秒    &lt;span style=&quot;color: #ae81ff;&quot;&gt;2&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;3.00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;1.00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;   &lt;span style=&quot;color: #ae81ff;&quot;&gt;96.00&lt;/span&gt;
&lt;span style=&quot;color: #ae81ff;&quot;&gt;17&lt;/span&gt;时&lt;span style=&quot;color: #ae81ff;&quot;&gt;34&lt;/span&gt;分&lt;span style=&quot;color: #ae81ff;&quot;&gt;36&lt;/span&gt;秒    &lt;span style=&quot;color: #ae81ff;&quot;&gt;3&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;1.00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;1.00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;color: #ae81ff;&quot;&gt;00&lt;/span&gt;   &lt;span style=&quot;color: #ae81ff;&quot;&gt;98.00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;参考:&lt;/p&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://blog.yufeng.info/archives/1062&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;itop更方便的了解Linux下中断情况&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 style=&quot;font-size: 36px; margin: 0.67em 0; font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px;&quot;&gt;4. CPU亲缘性&lt;/h1&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;在 SMP 体系结构中，我们可以通过调用系统调用和一组相关的宏来设置 CPU 亲和性（CPU affinity），将一个或多个进程绑定到一个或多个处理器上运行。同样的，也可以为硬中断设置亲和性，将一个或多个中断源绑定到特定的 CPU 上运行。方法是修改&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;/proc/irq/$IRQ序号/smp_affinity&lt;/code&gt;，如下所示：&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap; background: transparent;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 8px; display: block; background: #23241f; margin: 0 4px;&quot;&gt;[root&lt;span&gt;@archimedes&lt;/span&gt; /proc]&lt;span style=&quot;color: #75715e;&quot;&gt;# cat /proc/irq/75/smp_affinity &lt;/span&gt;
&lt;span style=&quot;color: #ae81ff;&quot;&gt;00000001&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;表示序号为75的设备（这个场景中是有线网卡eth0）只用到了第一个cpu,可以修改这个参数，使它使用多个cpu。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;参数的具体含义：&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap; background: transparent;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 8px; display: block; background: #23241f; margin: 0 4px;&quot;&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;Binary&lt;/span&gt;       Hex 
CPU &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0001&lt;/span&gt;         &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt; 
CPU &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0010&lt;/span&gt;         &lt;span style=&quot;color: #ae81ff;&quot;&gt;2&lt;/span&gt;
CPU &lt;span style=&quot;color: #ae81ff;&quot;&gt;2&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;0100&lt;/span&gt;         &lt;span style=&quot;color: #ae81ff;&quot;&gt;4&lt;/span&gt;
CPU &lt;span style=&quot;color: #ae81ff;&quot;&gt;3&lt;/span&gt;    &lt;span style=&quot;color: #ae81ff;&quot;&gt;1000&lt;/span&gt;         &lt;span style=&quot;color: #ae81ff;&quot;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;参数是一个10进制的值，cpu n == 2 的 n 次方。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;如果用cpu0和cpu2：&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap; background: transparent;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 8px; display: block; background: #23241f; margin: 0 4px;&quot;&gt;Binary       Hex 
CPU 0    0001         1 
CPU 2    0100         4
&lt;span style=&quot;color: #F92672;&quot;&gt;-----------------------&lt;/span&gt;
both     0101         5
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;全用则等于 f：&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap; background: transparent;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 8px; display: block; background: #23241f; margin: 0 4px;&quot;&gt;Binary       Hex 
CPU 0    0001         1 
CPU 1    0010         2
CPU 2    0100         4
CPU 3    1000         8
&lt;span style=&quot;color: #F92672;&quot;&gt;-----------------------&lt;/span&gt;
both     1111         f
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;用如下方式修改亲缘性：&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap; background: transparent;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 8px; display: block; background: #23241f; margin: 0 4px;&quot;&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;echo&lt;/span&gt; f &amp;gt; /proc/irq/&lt;span style=&quot;color: #ae81ff;&quot;&gt;75&lt;/span&gt;/smp_affinity
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 style=&quot;font-size: 36px; margin: 0.67em 0; font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px;&quot;&gt;5. 网卡中断负载均衡&lt;/h1&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;有时网卡的所有(硬)中断都会被同一个CPU响应，并且之后触发的软中断也是由该cpu执行的，这会导致无法充分利用多核cpu，此时我们可以用一些手段将中断均匀地平摊到每个核心，利用相对富余的cpu来提升网络吞吐量。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;办法有两种：&lt;/p&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;5.1 硬中断负载均衡：&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;如前文所述修改 smp_affinity 文件。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;以下是在我本机（Ubuntu12.04）做的一个实验。首先&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;cat /proc/interrupts&lt;/code&gt;查看中断情况，初始状态如下（只显示无线网卡）：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1406379092967.png&quot; name=&quot;a29dc37e-8554-4fae-91e2-eb9d8f444091&quot; src=&quot;/assets/img/18db7ecb2eb9ce6aa74e0ac9e0abf03d.png&quot; style=&quot;border: 0; max-width: 100%; border-radius: 8px;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;接下来修改该设备的中断cpu亲和性，让cpu0负责处理所有的中断：&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap; background: transparent;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 8px; display: block; background: #23241f; margin: 0 4px;&quot;&gt;echo &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt; &amp;gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;/proc/irq&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;/17/smp&lt;/span&gt;_affinity
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;开几个网页，看看视频，查看中断，可以看到cpu1/2/3上的中断数没有任何改变：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1406379105051.png&quot; name=&quot;c78f1581-bc0e-48cb-94ad-24abd50a151d&quot; src=&quot;/assets/img/4ea4c3bb37e7406fb33afcdacfddf472.png&quot; style=&quot;border: 0; max-width: 100%; border-radius: 8px;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;然后再修改affinity，将中断处理转移到其他3个核心上：&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap; background: transparent;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 8px; display: block; background: #23241f; margin: 0 4px;&quot;&gt;echo e &amp;gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;/proc/irq&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;/17/smp&lt;/span&gt;_affinity
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;继续监控，结果如下：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1406379116647.png&quot; name=&quot;cf9b81e7-665c-4758-9b0a-899ee4a04e67&quot; src=&quot;/assets/img/f560d951015359a924242aa2a0b0eaaa.png&quot; style=&quot;border: 0; max-width: 100%; border-radius: 8px;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;cpu0上的中断数量不再变化，1/2/3上处理的中断数一直在增加，符合预期。&lt;/p&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;5.2 使用RPS实现软中断负载均衡&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;RPS是google贡献的一个patch，基本原理是：根据数据包的源地址，目的地址以及目的和源端口，计算出一个hash值，然后根据这个hash值来选择软中断运行的cpu， 从上层来看，也就是说将每个连接和cpu绑定，并通过这个hash值，来均衡软中断在多个cpu上。详细可以参见&lt;a href=&quot;http://simohayha.iteye.com/blog/720850&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;Receive packet steering patch详解，Linux内核 RPS和RFS功能详细测试分析&lt;/a&gt;。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;此外还可以使用irqbalance实现硬中断负载均衡，但是据说效果不好，参见&lt;a href=&quot;http://blog.yufeng.info/archives/2422&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;深度剖析告诉你irqbalance有用吗&lt;/a&gt;？&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;这一块水太深，不会。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;参考：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://blog.yufeng.info/archives/2037&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;MYSQL数据库网卡软中断不平衡问题及解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;a href=&quot;http://moblog.wiredwings.com/archives/20100827/Howto-Enable-Receive-Packet-Steering-RPS-on-Linux-2.6.35.html&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;Howto: Enable Receive Packet Steering (RPS) on Linux 2.6.35&lt;/a&gt;&lt;br/&gt;这篇文章提到了应用了RPS后，依然是CPU0在处理所有的硬中断，要看/proc/softirqs才能看到软中断的均衡。&lt;/p&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;a href=&quot;http://hi.baidu.com/farmerluo/item/4a0ba7e9298292c3bbf37dbb&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;关于linux系统上软中断只用到一个cpu的问题&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://www.ha97.com/4617.html&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;Web性能压力测试工具之ApacheBench（ab）详解&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_8f650b3301012z26.html&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;Linux网卡中断使单个CPU过载&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>线段树</title>
      <link>place_your_blog_url_here/%E7%AE%97%E6%B3%95/2014/07/26/%E7%BA%BF%E6%AE%B5%E6%A0%91.html</link>
      <pubDate>26 Jul 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/%E7%AE%97%E6%B3%95/2014/07/26/线段树</guid>
      <description>&lt;div style=&quot;line-height: 1.6; font-family: Helvetica Neue, Arial, Hiragino Sans GB, STHeiti, Microsoft YaHei, WenQuanYi Micro Hei, SimSun, Song, sans-serif;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;结构&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1405924933637.png&quot; name=&quot;83469ba4-d53f-4406-829b-e0144e7e424c&quot; src=&quot;/assets/img/452338c4f7751cd55052264d8a231221.png&quot; style=&quot;border: 0; max-width: 100%; border-radius: 8px;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;特点：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;完全二叉树&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;每个节点代表一个区间，孩子节点分别代表两个子区间&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;节点保存着 &lt;strong style=&quot;font-weight: bold;&quot;&gt;该区间内问题的解&lt;/strong&gt;，以及求解需要的其他数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;用一个数组保存，和 heap 结构类似。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;分治，要求能够从若干子区间的解推导出父区间的解，且对父区间的更新可以传导给子区间&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;适用于区间查询 / 区间维护等问题&lt;/p&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;操作&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;线段树支持以下操作：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;构造&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;更新&lt;ul style=&quot;margin-top: 0; margin-bottom: 0; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;单点更新&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;区间更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;区间查询&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;以区间和问题为例：&lt;/p&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;构造&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;O(N)&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap; background: transparent;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 8px; display: block; background: #23241f; margin: 0 4px;&quot;&gt;tree = &lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;#### Utils&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;eval&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(i)&lt;/span&gt;:&lt;/span&gt;
    &lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;&quot;&quot;
    由孩子节点计算某节点的 sum
    &quot;&quot;&quot;&lt;/span&gt;
    tree[i][&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;sum&#39;&lt;/span&gt;] = tree[lc(i)][&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;sum&#39;&lt;/span&gt;] + tree[rc(i)][&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;sum&#39;&lt;/span&gt;]    

&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;lc&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(i)&lt;/span&gt;:&lt;/span&gt;
    &lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;&quot;&quot;
    左孩子
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;2&lt;/span&gt;*(i+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) - &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;

&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;rc&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(i)&lt;/span&gt;:&lt;/span&gt;
    &lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;&quot;&quot;
    右孩子
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;2&lt;/span&gt;*(i+&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;)

&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;mid&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(i)&lt;/span&gt;:&lt;/span&gt;
    &lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;&quot;&quot;
    计算节点所代表区间的中间位置
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; tree[i][&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;start&#39;&lt;/span&gt;] + (tree[i][&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;end&#39;&lt;/span&gt;]-tree[i][&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;start&#39;&lt;/span&gt;])/&lt;span style=&quot;color: #ae81ff;&quot;&gt;2&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;####&lt;/span&gt;

&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;init&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(array)&lt;/span&gt;:&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;global&lt;/span&gt; tree

    &lt;span style=&quot;color: #75715e;&quot;&gt;# 计算线段树节点个数，完全二叉树的节点数 = 2^(height+1) - 1&lt;/span&gt;
    length = len(array) &lt;span style=&quot;color: #75715e;&quot;&gt;# range length&lt;/span&gt;
    height = math.ceil(math.log(length,&lt;span style=&quot;color: #ae81ff;&quot;&gt;2&lt;/span&gt;)) 
    maxSize = int(math.pow(&lt;span style=&quot;color: #ae81ff;&quot;&gt;2&lt;/span&gt;,height + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) - &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) 

    _init(array,&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;,length - &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) &lt;span style=&quot;color: #75715e;&quot;&gt;# 默认区间为数组下标区间&lt;/span&gt;

&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;_init&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(array,i,s,e)&lt;/span&gt;:&lt;/span&gt;
    &lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;&quot;&quot;
    构造一棵线段树，节点格式：{start:1,end:2,sum:8}
    array -- 原始数组
    i -- 根节点
    s -- 根节点代表的区间开始处
    e -- 根节点代表的区间结束处
    &quot;&quot;&quot;&lt;/span&gt;
    tree[i] = {&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;start&#39;&lt;/span&gt;:s,&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;end&#39;&lt;/span&gt;:e,&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;sum&#39;&lt;/span&gt;:&lt;span style=&quot;color: #F92672;&quot;&gt;None&lt;/span&gt;}
    &lt;span style=&quot;color: #75715e;&quot;&gt;## 如果是原子区间，即叶子节点&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; s == e:
        tree[i][&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;sum&#39;&lt;/span&gt;] = array[s]
        &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt;

    _init(array, lc(i), s, mid(i))
    _init(array, rc(i), mid(i) + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;, e)
    eval(i)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;单点更新&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;O(log2N)&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap; background: transparent;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 8px; display: block; background: #23241f; margin: 0 4px;&quot;&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;update&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(i,value)&lt;/span&gt;:&lt;/span&gt;    
    _update(&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;,i,value)

&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;_update&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(root,i,value)&lt;/span&gt;:&lt;/span&gt;
    &lt;span style=&quot;color: #75715e;&quot;&gt;# 找到了这个点，更新其sum并返回&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; tree[root][&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;start&#39;&lt;/span&gt;] == i &lt;span style=&quot;color: #F92672;&quot;&gt;and&lt;/span&gt; tree[root][&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;end&#39;&lt;/span&gt;] == i:
        tree[root][&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;sum&#39;&lt;/span&gt;] = value
        &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; i&amp;lt;= mid(root):
        _update(lc(root),i,value)
    &lt;span style=&quot;color: #F92672;&quot;&gt;else&lt;/span&gt;:
        _update(rc(root),i,value)
    eval(root)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;区间更新&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;O(log2N)&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;基本思路是将要修改的区间顺着根一层一层往下查找，直到找到一批子区间刚好组成目标区间，再将更新动作应用在这些区间内。比如文章开始的线段树中，如果要更新[1,7]，则可以在树中找到节点[1,5], [6,7]刚好凑成[1,7]，更新这两个区间，重新计算二者祖先节点值即可。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;问题是[1,5]并不是叶子节点，如果将以它为根的整个子树全部更新，那么一次更新的动作涉及到的节点就很多了。因此引入延迟更新的思路：&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 15px 0; font-size: 14px; border-left: 5px solid #ddd; background-color: rgba(102, 128, 153, 0.05);&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;当更新[1,5]时，只更新该节点，并给它加上一个更新动作的标记，子节点不更新。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;查询或修改时，如果碰到了节点[1,5]，并决定进入其子节点考察，为了不访问到错误的值，需要看[1,5]的更新标记，如果有，则将更新动作应用到子节点，并清除自身的标记。子节点的更新则继续 lazy 的思路。&lt;/p&gt;
&lt;/blockquote&gt;&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap; background: transparent;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 8px; display: block; background: #23241f; margin: 0 4px;&quot;&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;rangeUpdate&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(start,end,value)&lt;/span&gt;:&lt;/span&gt;
    _rangeUpdate(&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;,start,end,value)

&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;_rangeUpdate&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(root,start,end,value)&lt;/span&gt;:&lt;/span&gt;
    &lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;&quot;&quot;
    线段树的区间update，必须满足父区间的update可以传递到左右子区间.
    -- 即update(a,b)的效果 等价于 update(a,i) &amp;amp; update(i+1,b).

    lazy update后，其子树的data是过时的, 因此 rangeUpdate 和 query 时，在进入孩子节点考察前，必须先将父节点的 update 动作推送给它的左右孩子。
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span style=&quot;color: #75715e;&quot;&gt;# 到了某个最大组成子区间，lazy更新并返回&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; tree[root][&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;start&#39;&lt;/span&gt;] == start &lt;span style=&quot;color: #F92672;&quot;&gt;and&lt;/span&gt; tree[root][&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;end&#39;&lt;/span&gt;] == end:
        tree[root][&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;sum&#39;&lt;/span&gt;] = (end - start + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) * value
        tree[root][&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;update&#39;&lt;/span&gt;] = value    &lt;span style=&quot;color: #75715e;&quot;&gt;# 标记&lt;/span&gt;
        &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt;

    &lt;span style=&quot;color: #75715e;&quot;&gt;# 推送更新动作到子区间&lt;/span&gt;
    _pushDownUpdate(root)

    &lt;span style=&quot;color: #75715e;&quot;&gt;# 更新子区间&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; end &amp;lt;= mid(root):
        _rangeUpdate(lc(root),start,end,value)
    &lt;span style=&quot;color: #F92672;&quot;&gt;elif&lt;/span&gt; start &amp;gt; mid(root):
        _rangeUpdate(rc(root),start,end,value)
    &lt;span style=&quot;color: #F92672;&quot;&gt;else&lt;/span&gt;:
        _rangeUpdate(lc(root),start,mid(root),value)
        _rangeUpdate(rc(root),mid(root) + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;,end,value)

    &lt;span style=&quot;color: #75715e;&quot;&gt;# 子区间更新完毕，重新计算当前节点的值&lt;/span&gt;
    eval(root)    

&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;_pushDownUpdate&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(parent)&lt;/span&gt;:&lt;/span&gt;
    &lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;&quot;&quot;
    将update动作传递给孩子
    &quot;&quot;&quot;&lt;/span&gt;
    p = tree[parent] &lt;span style=&quot;color: #75715e;&quot;&gt;# parent&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;update&#39;&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;in&lt;/span&gt; p:
        u = p[&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;update&#39;&lt;/span&gt;]
        l = tree[lc(parent)] &lt;span style=&quot;color: #75715e;&quot;&gt;# left child&lt;/span&gt;
        r = tree[rc(parent)] &lt;span style=&quot;color: #75715e;&quot;&gt;# right child&lt;/span&gt;
        &lt;span style=&quot;color: #75715e;&quot;&gt;# 给左右子区间记录update动作&lt;/span&gt;
        l[&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;update&#39;&lt;/span&gt;] = r[&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;update&#39;&lt;/span&gt;] = u
        &lt;span style=&quot;color: #75715e;&quot;&gt;# 更新左右子区间&lt;/span&gt;
        l[&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;sum&#39;&lt;/span&gt;] = (l[&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;end&#39;&lt;/span&gt;] - l[&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;start&#39;&lt;/span&gt;] + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) * u
        r[&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;sum&#39;&lt;/span&gt;] = (r[&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;end&#39;&lt;/span&gt;] - r[&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;start&#39;&lt;/span&gt;] + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) * u
        &lt;span style=&quot;color: #75715e;&quot;&gt;# 清除父区间的update动作&lt;/span&gt;
        &lt;span style=&quot;color: #F92672;&quot;&gt;del&lt;/span&gt; p[&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;update&#39;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;区间查询&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;O(log2N)&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;找最大组成子区间，merge结果&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap; background: transparent;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 8px; display: block; background: #23241f; margin: 0 4px;&quot;&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;query&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(start,end)&lt;/span&gt;:&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; _query(&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;,start,end)

&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;_query&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(root,start,end)&lt;/span&gt;:&lt;/span&gt;
    &lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;&quot;&quot;
    对root的子区间进行查询, [start,end]必须是root所代表的子区间
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span style=&quot;color: #75715e;&quot;&gt;# 查询的区间就是root的区间时，直接返回root保存的data&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; tree[root][&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;start&#39;&lt;/span&gt;] == start &lt;span style=&quot;color: #F92672;&quot;&gt;and&lt;/span&gt; tree[root][&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;end&#39;&lt;/span&gt;] == end:
        &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; tree[root][&lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;sum&#39;&lt;/span&gt;]

    _pushDownUpdate(root)

    &lt;span style=&quot;color: #75715e;&quot;&gt;# [start,end]:&lt;/span&gt;
    &lt;span style=&quot;color: #75715e;&quot;&gt;# 1. 如果在左子区间内，进入左子树&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; end &amp;lt;= mid(root):
        &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; _query(lc(root),start,end)

    &lt;span style=&quot;color: #75715e;&quot;&gt;# 2. 如果在右子区间内，进入右子树&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; start &amp;gt; mid(root):
        &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; _query(rc(root),start,end)

    &lt;span style=&quot;color: #75715e;&quot;&gt;# 3. 跨越了左右子区间，则将[start,end]拆分为[start,mid] &amp;amp; [mid+1,end]，&lt;/span&gt;
    &lt;span style=&quot;color: #75715e;&quot;&gt;#    分别进入左右子树查询，并merge这两个区间上的查询结果&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; _query(lc(root),start,mid(root)) + _query(rc(root),mid(root) + &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;,end)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>桶排序在排行榜问题中的应用</title>
      <link>place_your_blog_url_here/%E7%AE%97%E6%B3%95/2014/07/26/%E6%A1%B6%E6%8E%92%E5%BA%8F%E5%9C%A8%E6%8E%92%E8%A1%8C%E6%A6%9C%E9%97%AE%E9%A2%98%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8.html</link>
      <pubDate>26 Jul 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/%E7%AE%97%E6%B3%95/2014/07/26/桶排序在排行榜问题中的应用</guid>
      <description>&lt;div style=&quot;line-height: 1.6; font-family: Helvetica Neue, Arial, Hiragino Sans GB, STHeiti, Microsoft YaHei, WenQuanYi Micro Hei, SimSun, Song, sans-serif;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;基本思路&lt;/h2&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;将集合的值的范围分割成n个桶，极端情况下一个值一个桶；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;遍历集合，每个值入桶；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;桶内用其他方式如快速排序排序。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;适用场景&lt;/h2&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 15px 0; font-size: 14px; border-left: 5px solid #ddd; background-color: rgba(102, 128, 153, 0.05);&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;集合总体取值范围较小的场景&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;应用&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;在&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;总排名&lt;/code&gt;这种场景中经常使用，一个&lt;a href=&quot;http://blog.codingnow.com/2014/03/mmzb_db_2.html&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;例子&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 15px 0; font-size: 14px; border-left: 5px solid #ddd; background-color: rgba(102, 128, 153, 0.05);&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;针对陌陌争霸我们是这样做的：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;陌陌争霸中用于排名的分数区间不大，也就是 0 分到 5000 分。而参与排名的人数众多，数以百万计。对百万用户做插入排序，每个插入即使是 O(N) 的也不可接受。可事实是大量玩家的分数相同，都是并列排名的。所以我们只需要做 5000 个桶，每个桶里仅记录这个分数有多少个人就可以了。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;当玩家分数变迁，把原来的桶减一，新的桶加一。这个操作就是 O(1) 的。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;而排行榜的查询仅需要把当前分数靠前的桶累加，就能获知查询者的名次。对于上百万玩家，看到哪些人和你并列的人的名字是没有意义的。这个查询虽然是 O(n) 复杂度，但 n 只有区区 5000 ，还可以做 cache 以应对查询频率远高于更新频率的情况。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;真正需要精确知道人名的是榜单的前 200 个人，而对前 200 个人做插入排序也很快，所以并不会造成性能问题。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;我们在系统的单点做排行榜的维持，完全没有外部数据库操作，它只是一小段操作普通内存结构的 c 代码。而这个单点远远成为不了整个系统的热点。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;我们在系统临时退出时，把已经排好的榜单落地，下次启动的时候恢复。但也不必完全信任落地的数据，可以用离线脚本检索整个数据库重新生成一份正确的榜单。所以数据库中的榜单只是被 cache 起来而已，系统运行期间是不需要写入数据库的，也不用担心数据丢失。&lt;/p&gt;
&lt;/blockquote&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;一个分值一个桶，给一个玩家计算排名时，统计他所在桶之前所有桶的玩家数即可。这不是一个精确的值，因为同分的没有计算在内。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;同样的思路也可以用在 &lt;strong style=&quot;font-weight: bold;&quot;&gt;在线时长排名&lt;/strong&gt; 等类似场景，只要：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;集合取值范围不大；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;不要求精确，因为不计入得分并列的人数&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>并查集</title>
      <link>place_your_blog_url_here/%E7%AE%97%E6%B3%95/2014/07/26/%E5%B9%B6%E6%9F%A5%E9%9B%86.html</link>
      <pubDate>26 Jul 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/%E7%AE%97%E6%B3%95/2014/07/26/并查集</guid>
      <description>&lt;div style=&quot;line-height: 1.6; font-family: Helvetica Neue, Arial, Hiragino Sans GB, STHeiti, Microsoft YaHei, WenQuanYi Micro Hei, SimSun, Song, sans-serif;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;概述&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;树形数据结构，通常用来解决连通集合相关的问题。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;一个容量为n的集合，对应的并查集是一个等长数组，a[i] 保存着第i个元素的父节点，这样递归地组成若干棵树，每个树是一个连通集合，树根的父节点指向自己。&lt;/p&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;操作&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;并查集最基本的两个操作：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 10px; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;查询元素所在集合 &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 8px; margin: 0 4px;&quot;&gt;findSet(i)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt; 从元素 i 向上回溯找树根即可。一个集合由其根元素标识。&lt;/p&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;合并集合 &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 8px; margin: 0 4px;&quot;&gt;union(i,j)&lt;/code&gt;：合并元素 i，j 所在集合&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt; 分别找到 i，j 所在集合的根，将其中一个挂在另一个下即可。&lt;br/&gt; &lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1406021715912.png&quot; name=&quot;d9566fd0-0fc9-4666-bac0-939131a65bc9&quot; src=&quot;/assets/img/7925cf5f655305353e7c6b8d9b31af8c.png&quot; style=&quot;border: 0; max-width: 100%; border-radius: 8px;&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;初始化：每个元素独立成为一个集合。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;优化&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;1. &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 8px; margin: 0 4px;&quot;&gt;findSet&lt;/code&gt; 路径压缩&lt;/strong&gt;&lt;br/&gt;极端情况下一棵集合树退化成一个链表，此时查找根节点耗时O(n)。&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 8px; margin: 0 4px;&quot;&gt;findSet&lt;/code&gt;中可以做这样一个优化：在找到根后，将路上碰到的节点都直接挂在根下，树的高度被压缩成了2，之后的查询都是O(1)的。这是一个扁平化树的过程：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1406022231178.png&quot; name=&quot;663a7ee2-8dff-42c6-988f-f36dc92eb9ef&quot; src=&quot;/assets/img/ffe478553d67a080217085fdc6779ef9.png&quot; style=&quot;border: 0; max-width: 100%; border-radius: 8px;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;2. &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 8px; margin: 0 4px;&quot;&gt;union&lt;/code&gt; 按集合大小合并&lt;/strong&gt;&lt;br/&gt;合并的时候将元素少的集合合并到元素多的集合中，这样合并之后树的高度会相对较小。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;这两个动作都可以认为是&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 8px; margin: 0 4px;&quot;&gt;O(1)&lt;/code&gt;的。&lt;/p&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;实现&lt;/h2&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap; background: transparent;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 8px; display: block; background: #23241f; margin: 0 4px;&quot;&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;#! /usr/bin/python&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;# coding=utf-8&lt;/span&gt;

raw = [&lt;span style=&quot;color: #ae81ff;&quot;&gt;8&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;3&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;5&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;6&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;8&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;9&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;3&lt;/span&gt;]
set = range(len(raw))   &lt;span style=&quot;color: #75715e;&quot;&gt;# 并查集 [0,1,2...]&lt;/span&gt;
size = [&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;] * len(raw)   &lt;span style=&quot;color: #75715e;&quot;&gt;# 每个集合的大小&lt;/span&gt;

&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;findSet&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(i)&lt;/span&gt;:&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; set[i] == i:
        &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; i

    set[i] = findSet(set[i])
    &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; set[i]

&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;union&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(i,j)&lt;/span&gt;:&lt;/span&gt;
    root1 = findSet(i)
    size1 = size[root1]

    root2 = findSet(j)
    size2 = size[root2]

    &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; size1 &amp;gt; size2:       &lt;span style=&quot;color: #75715e;&quot;&gt;# 把2挂在1下&lt;/span&gt;
        set[root2] = root1
        size[root1] += size2
        size[root2] = &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;else&lt;/span&gt;:                   &lt;span style=&quot;color: #75715e;&quot;&gt;# 把1挂在2下&lt;/span&gt;
        set[root1] = root2
        size[root2] += size1
        size[root1] = &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;

&lt;span style=&quot;color: #75715e;&quot;&gt;# 测试&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;test&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;print&lt;/span&gt; size[&lt;span style=&quot;color: #ae81ff;&quot;&gt;3&lt;/span&gt;],size[&lt;span style=&quot;color: #ae81ff;&quot;&gt;5&lt;/span&gt;]   &lt;span style=&quot;color: #75715e;&quot;&gt;# 1,1&lt;/span&gt;
    union(&lt;span style=&quot;color: #ae81ff;&quot;&gt;3&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;2&lt;/span&gt;)
    union(&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;2&lt;/span&gt;)              
    union(&lt;span style=&quot;color: #ae81ff;&quot;&gt;5&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;6&lt;/span&gt;)
    &lt;span style=&quot;color: #F92672;&quot;&gt;print&lt;/span&gt; findSet(&lt;span style=&quot;color: #ae81ff;&quot;&gt;3&lt;/span&gt;) == findSet(&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;), findSet(&lt;span style=&quot;color: #ae81ff;&quot;&gt;5&lt;/span&gt;) == findSet(&lt;span style=&quot;color: #ae81ff;&quot;&gt;6&lt;/span&gt;) &lt;span style=&quot;color: #75715e;&quot;&gt;# True True&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;print&lt;/span&gt; size[findSet(&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;)],size[findSet(&lt;span style=&quot;color: #ae81ff;&quot;&gt;5&lt;/span&gt;)] &lt;span style=&quot;color: #75715e;&quot;&gt;# 3,2&lt;/span&gt;

test()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>并发集合</title>
      <link>place_your_blog_url_here/%E5%B9%B6%E5%8F%91/2014/07/26/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88.html</link>
      <pubDate>26 Jul 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/%E5%B9%B6%E5%8F%91/2014/07/26/并发集合</guid>
      <description>&lt;div style=&quot;line-height: 1.6; font-family: Helvetica Neue, Arial, Hiragino Sans GB, STHeiti, Microsoft YaHei, WenQuanYi Micro Hei, SimSun, Song, sans-serif;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;1. &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;Collections&lt;/code&gt; 类提供的线程安全的集合&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;java.util.Collections&lt;/code&gt;提供了一系列方法将一个普通的集合包装成线程安全的集合，如&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;Collections.synchronizedCollection() / Collections.synchronizedSet()&lt;/code&gt; 等。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;它们的实现很简单，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;Collections&lt;/code&gt;内部定义了一系列集合类，它们的作用就是包装用户传进来的集合并把操作都代理给后者，唯一不同的是，这些内部集合类的每个方法都是&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;synchronized&lt;/code&gt;的，保证每个方法的互斥，虽然正确，但是效率不高，不推荐使用。&lt;/p&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 30px;&quot;&gt;2. &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;JUC&lt;/code&gt; 提供的并发集合&lt;/h2&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;2.1 ConcurrentLinkedQueue&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;基于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;lock-free&lt;/code&gt;算法实现的无界队列，关于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;lock-free&lt;/code&gt;可以参见笔记《Lock-Free 算法》。&lt;/p&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;2.2 ConcurrentHashMap&lt;/h3&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 15px 0; font-size: 14px; border-left: 5px solid #ddd; background-color: rgba(102, 128, 153, 0.05);&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;拆分锁&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;一个动作只会影响结构的一部分，则把整体拆分成若干部分，每个部分一个锁，部分A被锁不会影响部分B，从而提高并发程度。&lt;/p&gt;
&lt;/blockquote&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;内部用若干 segment 保存 entry；每个segment是一个小hashmap，它继承 ReentrantLock ，内部的 update 动作均须先加锁。segment个数由参数 &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;concurrencyLevel&lt;/code&gt; 决定。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;put/remove首先找segmengt，后者先加锁，再操作。put 插入时是插在链表头；remove 先找元素，再执行一个普通的链表节点删除操作。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;Segment 的 rehash 是不加锁的，它先创建一个新的空数组，接着将元素 rehash 到该数组，最后将新数组和旧数组切换。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;get/contains/iterator 读取操作不加锁，这是因为put/remove动作对数据结构的改变最终是个原子动作（put是一个对数组元素/Entry 指针的赋值操作；remove是一个对 entry.next 的赋值操作，rehash是一个对数组引用的赋值操作），&lt;strong style=&quot;font-weight: bold;&quot;&gt;因此read不会看到一个更新动作的中间状态&lt;/strong&gt;；但它可能和并发的put/remove方法调用重叠，它所看到的状态是其所在Segment在&lt;strong style=&quot;font-weight: bold;&quot;&gt;最后一个完成的update动作后&lt;/strong&gt;的状态，正在进行但未完成的put/remove对read是不可见的，如果前者先于read完成，read是有可能看到脏数据的。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;没有提供锁全部segment的方法，size的实现是先走几次fast-path，即不加锁统计所有segment的count和modcount两次，如果modcount发生改变，说明有并发操作，需要重新统计。如果重复该动作3次依然有问题，则依次对所有segment加锁，统计count。&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 15px 0; font-size: 14px; border-left: 5px solid #ddd; background-color: rgba(102, 128, 153, 0.05);&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;hashcode 决定桶的位置，equals决定两个对象是否相同。&lt;/p&gt;
&lt;/blockquote&gt;&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;CopyOnWriteArrayList&lt;/h3&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 15px 0; font-size: 14px; border-left: 5px solid #ddd; background-color: rgba(102, 128, 153, 0.05);&quot;&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt; copyonwrite  &lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; margin-bottom: 0; line-height: 1.6; font-size: 14px; font-weight: 300; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;所有的update动作都加锁，且对当前结构创建一个snapshot，在snapshot上完成update动作后，再将其转正，丢弃原结构 **&lt;/p&gt;
&lt;/blockquote&gt;&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;内部是个数组；&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;add/remove/set 均使用同一把 reentrantlock 实现互斥，并复制一份当前的数组，在该数组上完成write动作，最后用一个原子的引用赋值动作将snapshot切换为当前数组；即内部数组永远不会改变结构（readonly），只会发生整个数组的切换。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;get不加锁，和ConcurrentHashMap类似，由于write动作最终实质上是个原子的引用切换动作，因此get看到的要么是修改完成前的数组，要么是完成后的数组，它不会看到一个不稳定的中间状态，它也是不用加锁的。read看到的也是&lt;strong style=&quot;font-weight: bold;&quot;&gt;最后一个完成的write后&lt;/strong&gt;的数组，但很可能read时依然有进行中的write动作，这对read而言是不可见的，但如果它先于read完成，read是有可能读到脏数据的。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;iterator引用创建时的内部数组，不可对该数组write，因此它的remove/set/add都不可用；后续对CopyOnWriteArrayList的write动作对该iterator也是不可见的，这个道理很容易明白。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt; write 每次创建snapshot，代价很大；read 不加锁，很快；适合读多写少的场景。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;CopyOnWriteArraySet&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;基于 &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;CopyOnWriteArrayList&lt;/code&gt; 实现，add时创建数组副本，并用equals判重。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;不是hashset那种实现，和hashcode没关系。&lt;/p&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;ConcurrentLinkedQueue&lt;/h3&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 30px; margin-bottom: 20px; font-size: 24px;&quot;&gt;BlockingQueue&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;提供了几套api&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap; background: transparent;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 8px; display: block; background: #23241f; margin: 0 4px;&quot;&gt;Queue:      &amp;lt;--- 使用BlockingQueue时，不要用这些API
    &lt;span style=&quot;color: #75715e;&quot;&gt;// 抛异常&lt;/span&gt;
    add
    remove

    &lt;span style=&quot;color: #75715e;&quot;&gt;// 返回false/null&lt;/span&gt;
    offer 
    poll 

BlockingQueue:
    &lt;span style=&quot;color: #75715e;&quot;&gt;// timed 阻塞&lt;/span&gt;
    offer的超时版本
    poll的超时版本

    &lt;span style=&quot;color: #75715e;&quot;&gt;//一直阻塞&lt;/span&gt;
    put
    take
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;所有的子类都是基于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;lock&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;condition&lt;/code&gt;实现的，实现依据不同条件阻塞和唤醒线程&lt;/p&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 25px; margin-bottom: 15px; font-size: 18px;&quot;&gt;ArrayBlockingQueue&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;定长的 (实例化时一定要指定长度)，基于(循环)数组的阻塞队列，生产者消费者模型中 buffer 的典型实现。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;使用一个ReentrantLock保证数组的互斥访问，使用它派生的两个condition让线程在full-put和empty-take时阻塞和互相唤醒 (有两个独立的场合需要协作, 因此需要两个 condition), 它的核心实现如下(有改动)：&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap; background: transparent;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 8px; display: block; background: #23241f; margin: 0 4px;&quot;&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;/** The queued items */&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;final&lt;/span&gt; Object[] items;

&lt;span style=&quot;color: #75715e;&quot;&gt;// 首尾指针&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;/** items index for next take, poll, peek or remove */&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; takeIndex;

&lt;span style=&quot;color: #75715e;&quot;&gt;/** items index for next put, offer, or add */&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; putIndex;

&lt;span style=&quot;color: #75715e;&quot;&gt;/** Number of elements in the queue */&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; count;

&lt;span style=&quot;color: #75715e;&quot;&gt;/*
 * Concurrency control uses the classic two-condition algorithm
 * found in any textbook.
 */&lt;/span&gt;

&lt;span style=&quot;color: #75715e;&quot;&gt;/** Main lock guarding all access */&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;final&lt;/span&gt; ReentrantLock lock;
&lt;span style=&quot;color: #75715e;&quot;&gt;/** Condition for waiting takes */&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;final&lt;/span&gt; Condition notEmpty;
&lt;span style=&quot;color: #75715e;&quot;&gt;/** Condition for waiting puts */&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;final&lt;/span&gt; Condition notFull;

&lt;span style=&quot;color: #75715e;&quot;&gt;// put&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;put&lt;/span&gt;(E e) &lt;span style=&quot;color: #F92672;&quot;&gt;throws&lt;/span&gt; InterruptedException {
    lock.lockInterruptibly();
    &lt;span style=&quot;color: #F92672;&quot;&gt;try&lt;/span&gt; {
        &lt;span style=&quot;color: #F92672;&quot;&gt;while&lt;/span&gt; (count == items.length)   &lt;span style=&quot;color: #75715e;&quot;&gt;// 在 notFull 上 wait&lt;/span&gt;
            notFull.await();
        insert(e);                      &lt;span style=&quot;color: #75715e;&quot;&gt;// 在 notEmpty 上 signal&lt;/span&gt;
    } &lt;span style=&quot;color: #F92672;&quot;&gt;finally&lt;/span&gt; {
        lock.unlock();
    }
}
&lt;span style=&quot;color: #F92672;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;insert&lt;/span&gt;(E x) {
    items[putIndex] = x;
    putIndex = inc(putIndex);
    ++count;
    notEmpty.signal();
}

&lt;span style=&quot;color: #75715e;&quot;&gt;// take&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;public&lt;/span&gt; E &lt;span style=&quot;color: #a6e22e;&quot;&gt;take&lt;/span&gt;() &lt;span style=&quot;color: #F92672;&quot;&gt;throws&lt;/span&gt; InterruptedException {
    lock.lockInterruptibly();
    &lt;span style=&quot;color: #F92672;&quot;&gt;try&lt;/span&gt; {
        &lt;span style=&quot;color: #F92672;&quot;&gt;while&lt;/span&gt; (count == &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;)  &lt;span style=&quot;color: #75715e;&quot;&gt;// 在 notEmpty 上 wait&lt;/span&gt;
            notEmpty.await();
        &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; extract();   &lt;span style=&quot;color: #75715e;&quot;&gt;// 在 notFull 上 signal&lt;/span&gt;
    } &lt;span style=&quot;color: #F92672;&quot;&gt;finally&lt;/span&gt; {
        lock.unlock();
    }
}
&lt;span style=&quot;color: #F92672;&quot;&gt;private&lt;/span&gt; E &lt;span style=&quot;color: #a6e22e;&quot;&gt;extract&lt;/span&gt;() {
    E x = &lt;span style=&quot;color: #F92672;&quot;&gt;this&lt;/span&gt;.items[takeIndex];
    items[takeIndex] = &lt;span style=&quot;color: #F92672;&quot;&gt;null&lt;/span&gt;;
    takeIndex = inc(takeIndex);
    --count;
    notFull.signal();
    &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; x;
}

&lt;span style=&quot;color: #75715e;&quot;&gt;// helper&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;/**
 * Circularly increment i.
 */&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; inc(&lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; i) {
    &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; (++i == items.length) ? &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt; : i;
}

&lt;span style=&quot;color: #75715e;&quot;&gt;/**
 * Circularly decrement i.
 */&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; dec(&lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; i) {
    &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; ((i == &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;) ? items.length : i) - &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 25px; margin-bottom: 15px; font-size: 18px;&quot;&gt;LinkedBlockingQueue&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;基于链表的 BlockingQueue, 可选指定最大长度. 实现原理和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;ArrayBlockingQueue&lt;/code&gt;类似, 但采用了&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;two lock queue&lt;/code&gt;算法实现, 内部为 take 和 put �各用了一把锁(及一个 condition), 更精细也更复杂.&lt;/p&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 25px; margin-bottom: 15px; font-size: 18px;&quot;&gt;PriorityBlockingQueue&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;内部维护一个堆, 在空间不够时自动扩容, 实现原理大部分和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;ArrayBlockingQueue&lt;/code&gt;一致, 但没有用 &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;notFull&lt;/code&gt; condition, 因为它没有 Full 的概念.&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;在扩容时有一个小优化, 扩容分为两个步骤, 分配更大数组 + 复制原数组, 类的实现者认为不太可能会在扩容这个地方出现激烈竞争, 因此对第一步数组的分配没有用锁, 而是用一个额外的 spinlock , 允许在扩容时并发地 take. 分配成功后再加锁, 进行第二步的复制.&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;spinlock 是&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;Lock-free&lt;/code&gt;算法的一个典型应用，它的思路是当锁被占有时让 CPU 空转等待, 锁被释放时再试图 &lt;strong style=&quot;font-weight: bold;&quot;&gt;原子地&lt;/strong&gt; 加锁, 加锁失败则继续自旋. 假设一个二元标志位, 1代表锁被占有, 0代表锁空闲, 则以下是 spinlock 的一个例子:&lt;/p&gt;
&lt;pre style=&quot;overflow: initial; font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 14px; display: block; padding: 0; margin: 0 0 10px; line-height: 1.6; word-break: break-all; word-wrap: break-word; color: #333333; background-color: #f5f5f5; border: none; border-radius: 0; white-space: pre-wrap; background: transparent;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: inherit; padding: 1em; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 8px; display: block; background: #23241f; margin: 0 4px;&quot;&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;volatile&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;lock&lt;/span&gt; = &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;;

&lt;span style=&quot;color: #F92672;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #a6e22e;&quot;&gt;lockAndDoSth&lt;/span&gt;(){
    &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt;(;;){                            &lt;span style=&quot;color: #75715e;&quot;&gt;// &amp;lt;-- 1. 循环&lt;/span&gt;
        &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt;(&lt;span style=&quot;color: #F92672;&quot;&gt;lock&lt;/span&gt; == &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;) &lt;span style=&quot;color: #F92672;&quot;&gt;continue&lt;/span&gt;;
        &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt;(compareAndSet(&lt;span style=&quot;color: #F92672;&quot;&gt;lock&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;)){    &lt;span style=&quot;color: #75715e;&quot;&gt;// &amp;lt;-- 2. CAS, 原子的 read-modify-write 指令&lt;/span&gt;
            &lt;span style=&quot;color: #75715e;&quot;&gt;// 已经获取锁, do sth        &lt;/span&gt;

            &lt;span style=&quot;color: #F92672;&quot;&gt;lock&lt;/span&gt; = &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;;                 &lt;span style=&quot;color: #75715e;&quot;&gt;// 最后释放锁&lt;/span&gt;
        }&lt;span style=&quot;color: #F92672;&quot;&gt;else&lt;/span&gt;{
            Thread.&lt;span style=&quot;color: #F92672;&quot;&gt;yield&lt;/span&gt;();             &lt;span style=&quot;color: #75715e;&quot;&gt;// 获取锁失败, 主动出让 CPU&lt;/span&gt;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;关于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;lock-free&lt;/code&gt;的更多，可以参考笔记《Lock-Free 算法》。&lt;/p&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 25px; margin-bottom: 15px; font-size: 18px;&quot;&gt;DelayQueue&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;基于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;PriorityQueue&lt;/code&gt;, 无界（自动扩容）, 存放实现了&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;Delayed&lt;/code&gt;接口的对象. &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;Delayed#getDelay()&lt;/code&gt;表明这个对象的过期时间离当前时间有多久, 最近一个过期的对象放在堆顶. &lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;take&lt;/code&gt; 的调用方被阻塞, 直到堆顶的元素到期出队. 新对象的加入会调整堆, 并唤醒所有阻塞在&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;take&lt;/code&gt;的线程, 让它们根据新的堆顶元素调整自己的休眠时间.&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 10px; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word;&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, Courier New, monospace; font-size: 90%; padding: 0 4px; color: #c7254e; background-color: #f9f2f4; white-space: nowrap; border-radius: 4px; margin: 0 4px;&quot;&gt;DelayQueue&lt;/code&gt; 的典型使用场景是超时管理、定时器的实现，更多可以参考 &lt;a href=&quot;https://www.evernote.com/shard/s133/sh/d227e30b-0728-4599-9556-12c9cab77ab3/6a4d4d5c0608363acc46773d5aa27a76&quot; style=&quot;background: transparent;&quot; target=&quot;_blank&quot;&gt;笔记《定时器》&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>